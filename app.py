import streamlit as st
import re
import os
import io
import base64
import time
from PIL import Image
import requests
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound
import anthropic

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Topic Maker",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if 'video_id' not in st.session_state:
    st.session_state.video_id = None
if 'video_title' not in st.session_state:
    st.session_state.video_title = ""
if 'thumbnail_text' not in st.session_state:
    st.session_state.thumbnail_text = ""
if 'transcript' not in st.session_state:
    st.session_state.transcript = ""
if 'transcript_with_timestamps' not in st.session_state:
    st.session_state.transcript_with_timestamps = ""
if 'selected_model' not in st.session_state:
    st.session_state.selected_model = "Claude Opus 4"
if 'show_timestamps' not in st.session_state:
    st.session_state.show_timestamps = False
if 'synopsis_orig' not in st.session_state:
    st.session_state.synopsis_orig = ""
if 'synopsis_red' not in st.session_state:
    st.session_state.synopsis_red = ""
if 'need_rerun' not in st.session_state:
    st.session_state.need_rerun = False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –≤–∏–¥–µ–æ –∏–∑ URL YouTube
def extract_video_id(url):
    if not url:
        return None
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–æ–ª—å–∫–æ ID –≤–∏–¥–µ–æ
    if len(url) == 11 and re.match(r'^[A-Za-z0-9_-]{11}$', url):
        return url
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ URL YouTube
    youtube_regex = (
        r'(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})'
    )
    match = re.search(youtube_regex, url)
    if match:
        return match.group(1)
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∏–¥–µ–æ
def get_video_title(video_id):
    api_keys = []
    # –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
    i = 1
    while True:
        key_name = f"YOUTUBE_API_KEY_{i}"
        try:
            if key_name in st.secrets:
                api_keys.append(st.secrets[key_name])
                i += 1
            else:
                break
        except:
            break
    
    if not api_keys:
        return f"–í–∏–¥–µ–æ ID: {video_id}"
    
    # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for api_key in api_keys:
        try:
            youtube = build('youtube', 'v3', developerKey=api_key)
            request = youtube.videos().list(
                part="snippet",
                id=video_id
            )
            response = request.execute()
            
            if response['items']:
                return response['items'][0]['snippet']['title']
            else:
                return "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        except HttpError as e:
            if "quota" in str(e).lower():
                continue  # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞
            else:
                return f"–û—à–∏–±–∫–∞: {str(e)[:100]}"
    
    return "–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –∫–≤–æ—Ç—É"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ
def get_video_transcript(video_id):
    try:
        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
        api = YouTubeTranscriptApi()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
        transcript_data = api.fetch(video_id)
        
        # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –¥–≤—É—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        if transcript_data:
            # transcript_data - —ç—Ç–æ –æ–±—ä–µ–∫—Ç FetchedTranscript, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∏—Ç–µ—Ä–∏—Ä–æ–≤–∞—Ç—å
            # –ö–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–º–µ–µ—Ç –∞—Ç—Ä–∏–±—É—Ç—ã: text, start, duration
            
            # –í–µ—Ä—Å–∏—è –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
            full_text = '\n'.join([str(entry.text) for entry in transcript_data])
            
            # –í–µ—Ä—Å–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
            def format_time(seconds):
                """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç MM:SS –∏–ª–∏ HH:MM:SS"""
                hours = int(seconds // 3600)
                minutes = int((seconds % 3600) // 60)
                secs = int(seconds % 60)
                if hours > 0:
                    return f"{hours:02d}:{minutes:02d}:{secs:02d}"
                else:
                    return f"{minutes:02d}:{secs:02d}"
            
            text_with_timestamps = []
            for entry in transcript_data:
                start_time = entry.start
                text = str(entry.text)
                text_with_timestamps.append(f"[{format_time(start_time)}] {text}")
            
            full_text_with_timestamps = '\n'.join(text_with_timestamps)
            
            return full_text, full_text_with_timestamps
        else:
            return "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ", "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ"
            
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
        error_str = str(e)
        if "no element found" in error_str.lower() or "xml" in error_str.lower():
            return "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ", "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ"
        else:
            error_msg = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é: {error_str[:200]}"
            return error_msg, error_msg

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–µ–≤—å—é —á–µ—Ä–µ–∑ Claude API
def get_thumbnail_text(video_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–µ–≤—å—é
        thumbnail_url = f"https://i.ytimg.com/vi/{video_id}/maxresdefault.jpg"
        response = requests.get(thumbnail_url)
        
        # –ï—Å–ª–∏ maxresdefault –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º hqdefault
        if response.status_code != 200:
            thumbnail_url = f"https://i.ytimg.com/vi/{video_id}/hqdefault.jpg"
            response = requests.get(thumbnail_url)
            
        if response.status_code != 200:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ"
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(io.BytesIO(response.content))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        buffered = io.BytesIO()
        image.save(buffered, format="JPEG")
        img_base64 = base64.b64encode(buffered.getvalue()).decode()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            with open("prompt_get_thumbnail_text.txt", "r", encoding="utf-8") as file:
                prompt_text = file.read()
        except FileNotFoundError:
            prompt_text = "–û–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –≤–∏–¥–∏—Ç–µ –Ω–∞ —ç—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –ø—Ä–µ–≤—å—é YouTube –≤–∏–¥–µ–æ. –í—ã–ø–∏—à–∏—Ç–µ –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Ç–æ—á–Ω–æ –∫–∞–∫ –æ–Ω –Ω–∞–ø–∏—Å–∞–Ω."
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Claude
        if "ANTHROPIC_API_KEY" not in st.secrets:
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–∞—Ö
            available_keys = list(st.secrets.keys()) if hasattr(st.secrets, 'keys') else []
            return f"API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {available_keys}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç
        api_key = str(st.secrets["ANTHROPIC_API_KEY"])
        if not api_key or not api_key.startswith("sk-"):
            return f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞ Anthropic (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-')"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ —Å API –∫–ª—é—á–æ–º, –∏–∑–±–µ–≥–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç Streamlit
        import anthropic as anthropic_module
        client = anthropic_module.Anthropic(api_key=api_key)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude
        message = client.messages.create(
            model="claude-3-haiku-20240307",  # –ò—Å–ø–æ–ª—å–∑—É–µ–º Haiku –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            max_tokens=1000,
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": prompt_text
                        },
                        {
                            "type": "image",
                            "source": {
                                "type": "base64",
                                "media_type": "image/jpeg",
                                "data": img_base64
                            }
                        }
                    ]
                }
            ]
        )
        
        return message.content[0].text
    except Exception as e:
        # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–≤—å—é: {str(e)}"
        if "api_key" in str(e).lower():
            error_msg = "–ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º Anthropic. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö."
        return error_msg

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ Claude
def get_claude_model():
    model_mapping = {
        "Claude Opus 4": "claude-3-opus-20240229",
        "Claude Sonnet 4.5": "claude-3-5-sonnet-20241022",
        "Claude Opus 4.5": "claude-3-opus-20240229",  # –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º Opus 3
        "Claude Sonnet 4.1": "claude-3-sonnet-20240229"
    }
    return model_mapping[st.session_state.selected_model]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
def get_max_tokens():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    # Claude Opus 3 –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç 4096 —Ç–æ–∫–µ–Ω–æ–≤
    # Claude Sonnet 3.5 –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç 8192 —Ç–æ–∫–µ–Ω–æ–≤
    if st.session_state.selected_model in ["Claude Opus 4", "Claude Opus 4.5"]:
        return 4096
    elif st.session_state.selected_model == "Claude Sonnet 4.5":
        return 8192
    else:  # Claude Sonnet 4.1
        return 4096

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–Ω–æ–ø—Å–∏—Å–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
def create_synopsis_orig():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∏–Ω–æ–ø—Å–∏—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript = st.session_state.get('transcript', '')
        if not transcript:
            return None, "–ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–Ω–æ–ø—Å–∏—Å–∞"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
        try:
            with open("prompt_synopsis_orig.txt", "r", encoding="utf-8") as file:
                prompt_text = file.read()
        except FileNotFoundError:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª prompt_synopsis_orig.txt"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if "ANTHROPIC_API_KEY" not in st.secrets:
            return None, "API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Claude
        api_key = str(st.secrets["ANTHROPIC_API_KEY"])
        client = anthropic.Anthropic(api_key=api_key)
        
        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limit
        max_retries = 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        base_delay = 10  # –ù–∞—á–∏–Ω–∞–µ–º —Å –º–µ–Ω—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        
        for attempt in range(max_retries):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt > 0:
                    wait_time = base_delay * (2 ** (attempt - 1))  # 10, 20, 40, 80 —Å–µ–∫—É–Ω–¥
                    st.info(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_time)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ª–∏–º–∏—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤
                message = client.messages.create(
                    model=get_claude_model(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å, –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    max_tokens=get_max_tokens(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
                    temperature=0.7,  # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –¥–ª—è –±–æ–ª–µ–µ —Å—Ç–∞–±–∏–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                    system=prompt_text,
                    messages=[
                        {
                            "role": "user",
                            "content": transcript
                        }
                    ]
                )
                
                result = message.content[0].text
                print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Å–∏–Ω–æ–ø—Å–∏—Å –¥–ª–∏–Ω–æ–π {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                return result, None
                
            except anthropic.RateLimitError as e:
                error_details = str(e)
                if "input tokens" in error_details.lower():
                    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                    if attempt < max_retries - 1:
                        st.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries} —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
                        continue
                    else:
                        return None, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –º–µ–Ω—å—à–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                else:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        
            except Exception as e:
                error_str = str(e)
                if "rate_limit" in error_str.lower() or "429" in error_str:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π."
                elif "timeout" in error_str.lower():
                    if attempt < max_retries - 1:
                        st.warning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                else:
                    return None, f"–û—à–∏–±–∫–∞: {error_str[:200]}"
                    
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏–Ω–æ–ø—Å–∏—Å–∞: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞
def create_synopsis_red(synopsis_orig):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞
        if not synopsis_orig:
            return None, "–ù–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
        try:
            with open("prompt_synopsis_red.txt", "r", encoding="utf-8") as file:
                prompt_text = file.read()
        except FileNotFoundError:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª prompt_synopsis_red.txt"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if "ANTHROPIC_API_KEY" not in st.secrets:
            return None, "API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Claude
        api_key = str(st.secrets["ANTHROPIC_API_KEY"])
        client = anthropic.Anthropic(api_key=api_key)
        
        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limit
        max_retries = 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        base_delay = 10  # –ù–∞—á–∏–Ω–∞–µ–º —Å –º–µ–Ω—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        
        for attempt in range(max_retries):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt > 0:
                    wait_time = base_delay * (2 ** (attempt - 1))  # 10, 20, 40, 80 —Å–µ–∫—É–Ω–¥
                    st.info(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_time)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude
                message = client.messages.create(
                    model=get_claude_model(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å, –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    max_tokens=get_max_tokens(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
                    temperature=0.7,
                    system=prompt_text,
                    messages=[
                        {
                            "role": "user",
                            "content": synopsis_orig
                        }
                    ]
                )
                
                result = message.content[0].text
                print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Å–∏–Ω–æ–ø—Å–∏—Å –¥–ª–∏–Ω–æ–π {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                return result, None
                
            except anthropic.RateLimitError as e:
                error_details = str(e)
                if "input tokens" in error_details.lower():
                    if attempt < max_retries - 1:
                        st.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries} —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
                        continue
                    else:
                        return None, "–°–∏–Ω–æ–ø—Å–∏—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                else:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        
            except Exception as e:
                error_str = str(e)
                if "rate_limit" in error_str.lower() or "429" in error_str:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π."
                elif "timeout" in error_str.lower():
                    if attempt < max_retries - 1:
                        st.warning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                else:
                    return None, f"–û—à–∏–±–∫–∞: {error_str[:200]}"
                    
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞: {str(e)}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if st.session_state.get('need_rerun', False):
    st.session_state.need_rerun = False
    st.rerun()

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
st.title("üé¨ Topic Maker")

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    st.session_state.selected_model = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Claude:",
        ["Claude Opus 4", "Claude Sonnet 4.5", "Claude Opus 4.5", "Claude Sonnet 4.1"],
        index=0
    )
    st.info(f"–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å: {st.session_state.selected_model}")
    st.info(f"–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –æ—Ç–≤–µ—Ç–∞: {get_max_tokens()}")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–∏–º–∏—Ç–∞—Ö API
    with st.expander("‚ÑπÔ∏è –û –ª–∏–º–∏—Ç–∞—Ö API"):
        st.write("""
        **–í–∞–∂–Ω–æ:** API Claude –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ —Å–∫–æ—Ä–æ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å–æ–≤.
        
        **–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:**
        - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—ã–±—Ä–∞–Ω–Ω–∞—è –≤–∞–º–∏ –º–æ–¥–µ–ª—å Claude
        - –ü—Ä–∏ –æ—à–∏–±–∫–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–µ–ª–∞–µ—Ç—Å—è –¥–æ 5 –ø–æ–ø—ã—Ç–æ–∫ —Å —É–≤–µ–ª–∏—á–∏–≤–∞—é—â–µ–π—Å—è –∑–∞–¥–µ—Ä–∂–∫–æ–π
        - –ó–∞–¥–µ—Ä–∂–∫–∏: 10, 20, 40, 80 —Å–µ–∫—É–Ω–¥ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
        
        **–ü—Ä–æ–±–ª–µ–º–∞ —Å –±–æ–ª—å—à–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏:**
        - –ü—Ä–æ–º–ø—Ç –¥–ª—è —Å–∏–Ω–æ–ø—Å–∏—Å–æ–≤ —Å–æ–¥–µ—Ä–∂–∏—Ç ~40000 —Å–∏–º–≤–æ–ª–æ–≤ –ø—Ä–∏–º–µ—Ä–æ–≤
        - –í–º–µ—Å—Ç–µ —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –≤–∏–¥–µ–æ —ç—Ç–æ —Å–æ–∑–¥–∞–µ—Ç –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π –∑–∞–ø—Ä–æ—Å
        - API –∏–º–µ–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ —Å–∫–æ—Ä–æ—Å—Ç—å —É–≤–µ–ª–∏—á–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤
        
        **–õ–∏–º–∏—Ç—ã –º–æ–¥–µ–ª–µ–π:**
        - Claude Opus 4: –¥–æ 4096 —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞ (‚âà10-12 —Ç—ã—Å. —Å–∏–º–≤–æ–ª–æ–≤)
        - Claude Sonnet 4.5: –¥–æ 8192 —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞ (‚âà20-24 —Ç—ã—Å. —Å–∏–º–≤–æ–ª–æ–≤)
        - Claude Sonnet 4.1: –¥–æ 4096 —Ç–æ–∫–µ–Ω–æ–≤ –æ—Ç–≤–µ—Ç–∞
        
        **–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–µ—à–µ–Ω–∏—è:**
        1. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Claude Sonnet 4.5** - —É –Ω–µ–≥–æ –≤—ã—à–µ –ª–∏–º–∏—Ç—ã (8192 —Ç–æ–∫–µ–Ω–∞)
        2. **–î–µ–ª–∞–π—Ç–µ –ø–∞—É–∑—ã** –º–µ–∂–¥—É —Å–æ–∑–¥–∞–Ω–∏–µ–º —Å–∏–Ω–æ–ø—Å–∏—Å–æ–≤ (2-3 –º–∏–Ω—É—Ç—ã)
        3. **–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–∏–¥–µ–æ** (–¥–æ 30 –º–∏–Ω—É—Ç), –∑–∞—Ç–µ–º –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ —É–≤–µ–ª–∏—á–∏–≤–∞–π—Ç–µ
        4. –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è - –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç
        
        **–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:**
        - –ï—Å–ª–∏ –ø—Ä–æ–±–ª–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å API –≤ –±—Ä–∞—É–∑–µ—Ä–µ Claude.ai
        - –¢–∞–º –ª–∏–º–∏—Ç—ã –≤—ã—à–µ –¥–ª—è –ª–∏—á–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        """)
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    with st.expander("üîç Debug Info"):
        st.write("Session State:")
        st.write(f"- video_id: {st.session_state.get('video_id', 'None')}")
        st.write(f"- video_title length: {len(st.session_state.get('video_title', ''))}")
        st.write(f"- thumbnail_text length: {len(st.session_state.get('thumbnail_text', ''))}")
        st.write(f"- transcript length: {len(st.session_state.get('transcript', ''))}")
        st.write(f"- synopsis_orig length: {len(st.session_state.get('synopsis_orig', ''))}")
        st.write(f"- synopsis_red length: {len(st.session_state.get('synopsis_red', ''))}")
        
        st.write("\nSecrets Status:")
        try:
            st.write(f"- Secrets available: {hasattr(st, 'secrets')}")
            if hasattr(st, 'secrets'):
                st.write(f"- Total secrets: {len(list(st.secrets.keys()))}")
                st.write(f"- ANTHROPIC_API_KEY: {'‚úÖ Found' if 'ANTHROPIC_API_KEY' in st.secrets else '‚ùå Not found'}")
                st.write(f"- YouTube keys: {sum(1 for k in st.secrets.keys() if k.startswith('YOUTUBE_API_KEY_'))}")
        except Exception as e:
            st.write(f"- Error checking secrets: {e}")
        
        if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            st.session_state.video_id = None
            st.session_state.video_title = ""
            st.session_state.thumbnail_text = ""
            st.session_state.transcript = ""
            st.session_state.transcript_with_timestamps = ""
            st.session_state.synopsis_orig = ""
            st.session_state.synopsis_red = ""
            st.rerun()

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
st.markdown("### üìπ –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –∏–ª–∏ ID –≤–∏–¥–µ–æ")

# –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.form("video_form"):
    video_input = st.text_input(
        "URL –∏–ª–∏ ID –≤–∏–¥–µ–æ:",
        placeholder="https://www.youtube.com/watch?v=... –∏–ª–∏ ID –≤–∏–¥–µ–æ"
    )
    
    submitted = st.form_submit_button("üîç –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞", type="primary")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
if submitted and video_input:
    video_id = extract_video_id(video_input)
    
    if not video_id:
        st.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ ID")
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
        st.session_state.video_id = video_id
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_container = st.container()
        
        with progress_container:
            with st.spinner("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∏–¥–µ–æ..."):
                title = get_video_title(video_id)
                st.session_state.video_title = title if title else ""
                st.success(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω: {title[:50]}..." if title and len(title) > 50 else f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            
            with st.spinner("üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ..."):
                thumbnail_text = get_thumbnail_text(video_id)
                st.session_state.thumbnail_text = thumbnail_text if thumbnail_text else ""
                st.success("‚úÖ –¢–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é –ø–æ–ª—É—á–µ–Ω")
            
            with st.spinner("üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏..."):
                transcript, transcript_with_timestamps = get_video_transcript(video_id)
                st.session_state.transcript = transcript if transcript else ""
                st.session_state.transcript_with_timestamps = transcript_with_timestamps if transcript_with_timestamps else ""
                st.success("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
            
            st.balloons()
            st.success(f"üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –≤–∏–¥–µ–æ ID: {video_id}")
            
            # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            st.rerun()

# –°–µ–∫—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
st.markdown("---")
st.markdown("### üìä –î–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞")

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö
data_container = st.container()

with data_container:
    col1, col2, col3 = st.columns(3)
    
    with col1:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ session_state
        current_title = st.session_state.get('video_title', '')
        st.text_area(
            "**üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ**",
            value=current_title,
            height=200,  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 100 –¥–æ 200
            disabled=False,  # –î–µ–ª–∞–µ–º –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
            key=f"title_display_{hash(current_title)}"  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        )
    
    with col2:
        current_thumbnail = st.session_state.get('thumbnail_text', '')
        st.text_area(
            "**üñºÔ∏è –¢–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é**",
            value=current_thumbnail,
            height=200,  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 100 –¥–æ 200
            disabled=False,  # –î–µ–ª–∞–µ–º –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
            key=f"thumbnail_display_{hash(current_thumbnail)}"
        )
    
    with col3:
        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        show_timestamps = st.checkbox(
            "–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏",
            value=st.session_state.show_timestamps,
            key="timestamps_checkbox"
        )
        st.session_state.show_timestamps = show_timestamps
        
        # –í—ã–±–∏—Ä–∞–µ–º –∫–∞–∫—É—é –≤–µ—Ä—Å–∏—é —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
        if show_timestamps:
            current_transcript = st.session_state.get('transcript_with_timestamps', '')
        else:
            current_transcript = st.session_state.get('transcript', '')
        
        st.text_area(
            "**üìÑ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞**",
            value=current_transcript,
            height=200,  # –£–≤–µ–ª–∏—á–µ–Ω–æ —Å 100 –¥–æ 200
            disabled=False,  # –î–µ–ª–∞–µ–º –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
            key=f"transcript_display_{hash(current_transcript)}_{show_timestamps}"
        )

# –°–µ–∫—Ü–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
st.markdown("---")
st.markdown("### üìù –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏")

col1, col2 = st.columns(2)

with col1:
    annotation_orig = st.text_area(
        "**–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞**",
        height=200,
        key="annotation_orig"
    )
    if st.button("üî® –°–æ–∑–¥–∞—Ç—å", key="create_annotation_orig"):
        if not st.session_state.video_id:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ")
        else:
            st.info("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

with col2:
    annotation_red = st.text_area(
        "**–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è –∏–∑–º–µ–Ω—ë–Ω–Ω–∞—è**",
        height=200,
        key="annotation_red"
    )
    if st.button("üî® –°–æ–∑–¥–∞—Ç—å", key="create_annotation_red"):
        if not st.session_state.video_id:
            st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ")
        else:
            st.info("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# –°–µ–∫—Ü–∏—è —Å–∏–Ω–æ–ø—Å–∏—Å–æ–≤
st.markdown("---")
st.markdown("### üìö –°–∏–Ω–æ–ø—Å–∏—Å—ã")

col1, col2 = st.columns(2)

with col1:
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å–∏–Ω–æ–ø—Å–∏—Å–∞ –∏–∑ session_state
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    current_synopsis_orig = st.session_state.get('synopsis_orig', '')
    synopsis_orig_input = st.text_area(
        "**–°–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞**",
        value=current_synopsis_orig,
        height=200,
        key=f"synopsis_orig_area_{hash(current_synopsis_orig)}"
    )
    
    if st.button("üî® –°–æ–∑–¥–∞—Ç—å", key="create_synopsis_orig"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        if not st.session_state.get('transcript', ''):
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º video_id
            if not st.session_state.video_id:
                st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞'")
            else:
                # –ï—Å—Ç—å video_id, –Ω–æ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                with st.spinner("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ..."):
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    title = get_video_title(st.session_state.video_id)
                    st.session_state.video_title = title if title else ""
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é
                    thumbnail_text = get_thumbnail_text(st.session_state.video_id)
                    st.session_state.thumbnail_text = thumbnail_text if thumbnail_text else ""
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                    transcript, transcript_with_timestamps = get_video_transcript(st.session_state.video_id)
                    st.session_state.transcript = transcript if transcript else ""
                    st.session_state.transcript_with_timestamps = transcript_with_timestamps if transcript_with_timestamps else ""
                    
                    if not st.session_state.transcript:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ")
                    else:
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω—ã")
                        
                        # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω–æ–ø—Å–∏—Å
                        with st.spinner("ü§ñ –°–æ–∑–¥–∞—é —Å–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞..."):
                            synopsis, error = create_synopsis_orig()
                            if error:
                                st.error(f"‚ùå {error}")
                            else:
                                st.session_state.synopsis_orig = synopsis
                                st.success(f"‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ —Å–æ–∑–¥–∞–Ω ({len(synopsis)} —Å–∏–º–≤–æ–ª–æ–≤)")
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ expander
                                with st.expander("üìÑ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å", expanded=True):
                                    st.text_area("", value=synopsis, height=400, key="synopsis_orig_result_2")
        else:
            # –ï—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è - —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω–æ–ø—Å–∏—Å
            with st.spinner("ü§ñ –°–æ–∑–¥–∞—é —Å–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞..."):
                synopsis, error = create_synopsis_orig()
                if error:
                    st.error(f"‚ùå {error}")
                else:
                    st.session_state.synopsis_orig = synopsis
                    st.success(f"‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ —Å–æ–∑–¥–∞–Ω ({len(synopsis)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ expander –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
                    with st.expander("üìÑ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å (—Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏)", expanded=True):
                        st.text_area("", value=synopsis, height=400, key="synopsis_orig_result")
                    st.info("üí° –°–∏–Ω–æ–ø—Å–∏—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É (F5) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ–ª–µ –∏–ª–∏ —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —Ç–µ–∫—Å—Ç –≤—ã—à–µ.")

with col2:
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞ –∏–∑ session_state
    current_synopsis_red = st.session_state.get('synopsis_red', '')
    synopsis_red_input = st.text_area(
        "**–°–∏–Ω–æ–ø—Å–∏—Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π**",
        value=current_synopsis_red,
        height=200,
        key=f"synopsis_red_area_{hash(current_synopsis_red)}"
    )
    
    if st.button("üî® –°–æ–∑–¥–∞—Ç—å", key="create_synopsis_red"):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞
        if not st.session_state.get('synopsis_orig', ''):
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            if not st.session_state.get('transcript', ''):
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º video_id
                if not st.session_state.video_id:
                    st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞'")
                else:
                    # –ï—Å—Ç—å video_id, –Ω–æ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                    with st.spinner("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ..."):
                        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        title = get_video_title(st.session_state.video_id)
                        st.session_state.video_title = title if title else ""
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é
                        thumbnail_text = get_thumbnail_text(st.session_state.video_id)
                        st.session_state.thumbnail_text = thumbnail_text if thumbnail_text else ""
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                        transcript, transcript_with_timestamps = get_video_transcript(st.session_state.video_id)
                        st.session_state.transcript = transcript if transcript else ""
                        st.session_state.transcript_with_timestamps = transcript_with_timestamps if transcript_with_timestamps else ""
                        
                        if not st.session_state.transcript:
                            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ")
                        else:
                            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω—ã")
                            
                            # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
                            with st.spinner("ü§ñ –°–æ–∑–¥–∞—é —Å–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞..."):
                                synopsis_orig, error = create_synopsis_orig()
                                if error:
                                    st.error(f"‚ùå {error}")
                                else:
                                    st.session_state.synopsis_orig = synopsis_orig
                                    st.success("‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ —Å–æ–∑–¥–∞–Ω")
                                    
                                    # –ò —Å–æ–∑–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å
                                    with st.spinner("ü§ñ –°–æ–∑–¥–∞—é –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å..."):
                                        synopsis_red, error = create_synopsis_red(synopsis_orig)
                                        if error:
                                            st.error(f"‚ùå {error}")
                                        else:
                                            st.session_state.synopsis_red = synopsis_red
                                            st.success(f"‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Å–æ–∑–¥–∞–Ω ({len(synopsis_red)} —Å–∏–º–≤–æ–ª–æ–≤)")
                                            with st.expander("üìÑ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å", expanded=True):
                                                st.text_area("", value=synopsis_red, height=400, key="synopsis_red_result_1")
            else:
                # –ï—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, –Ω–æ –Ω–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞ - —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                with st.spinner("ü§ñ –°–æ–∑–¥–∞—é —Å–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞..."):
                    synopsis_orig, error = create_synopsis_orig()
                    if error:
                        st.error(f"‚ùå {error}")
                    else:
                        st.session_state.synopsis_orig = synopsis_orig
                        st.success("‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ —Å–æ–∑–¥–∞–Ω")
                        
                        # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å
                        with st.spinner("ü§ñ –°–æ–∑–¥–∞—é –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å..."):
                            synopsis_red, error = create_synopsis_red(synopsis_orig)
                            if error:
                                st.error(f"‚ùå {error}")
                            else:
                                st.session_state.synopsis_red = synopsis_red
                                st.success(f"‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Å–æ–∑–¥–∞–Ω ({len(synopsis_red)} —Å–∏–º–≤–æ–ª–æ–≤)")
                                with st.expander("üìÑ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å", expanded=True):
                                    st.text_area("", value=synopsis_red, height=400, key="synopsis_red_result_2")
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å, —Å–æ–∑–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π
            with st.spinner("ü§ñ –°–æ–∑–¥–∞—é –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å..."):
                synopsis_red, error = create_synopsis_red(st.session_state.synopsis_orig)
                if error:
                    st.error(f"‚ùå {error}")
                else:
                    st.session_state.synopsis_red = synopsis_red
                    st.success(f"‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Å–æ–∑–¥–∞–Ω ({len(synopsis_red)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    with st.expander("üìÑ –ü–æ–ª—É—á–µ–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å", expanded=True):
                        st.text_area("", value=synopsis_red, height=400, key="synopsis_red_result_3")

# –°–µ–∫—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
st.markdown("---")
st.markdown("### üé≠ –°—Ü–µ–Ω–∞—Ä–∏–π")

scenario = st.text_area(
    "**–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π**",
    height=300,
    key="scenario"
)
if st.button("üî® –°–æ–∑–¥–∞—Ç—å", key="create_scenario"):
    if not st.session_state.video_id:
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ")
    else:
        st.info("üöß –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

# Footer —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
st.markdown("---")
if st.session_state.video_id:
    st.info(f"üìå –¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ ID: {st.session_state.video_id}")