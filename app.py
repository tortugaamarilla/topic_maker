import streamlit as st
import streamlit.components.v1 as components
import re
import os
import io
import base64
import time
import ssl
import json
import logging
from typing import Tuple, Optional, Dict, List, Any
from PIL import Image
import requests
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled, NoTranscriptFound
import anthropic
import yt_dlp
from datetime import datetime
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –î–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å yt-dlp
ssl._create_default_https_context = ssl._create_unverified_context


class ProxyManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ—Ç–∞—Ü–∏–µ–π –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤"""
    
    def __init__(self, config_file: str = "proxy_config.json"):
        self.config_file = config_file
        self.proxies = []
        self.current_index = 0
        self.max_retries_per_proxy = 2
        self.request_timeout = 30
        self.last_successful_proxy = None
        self.proxy_attempts = {}  # –°—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ–∫—Å–∏
        self.load_config()
        
    def load_config(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–∫—Å–∏ –∏–∑ —Ñ–∞–π–ª–∞"""
        try:
            if os.path.exists(self.config_file):
                with open(self.config_file, 'r', encoding='utf-8') as f:
                    config = json.load(f)
                    proxy_strings = config.get('proxies', [])
                    self.max_retries_per_proxy = config.get('max_retries_per_proxy', 2)
                    self.request_timeout = config.get('request_timeout', 30)
                    
                    # –ü–∞—Ä—Å–∏–º –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å—Ç—Ä–æ–∫–æ–≤–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ host:port:username:password
                    self.proxies = []
                    for proxy_str in proxy_strings:
                        if isinstance(proxy_str, str) and ':' in proxy_str:
                            parts = proxy_str.strip().split(':')
                            if len(parts) == 4:
                                self.proxies.append({
                                    "host": parts[0],
                                    "port": int(parts[1]),
                                    "username": parts[2],
                                    "password": parts[3]
                                })
                            else:
                                logger.warning(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏: {proxy_str}")
                        elif isinstance(proxy_str, dict):
                            # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                            self.proxies.append(proxy_str)
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ–ø—ã—Ç–æ–∫
                    for i in range(len(self.proxies)):
                        self.proxy_attempts[i] = 0
                    logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.proxies)} –ø—Ä–æ–∫—Å–∏-—Å–µ—Ä–≤–µ—Ä–æ–≤ –∏–∑ {self.config_file}")
            else:
                # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –Ω–µ—Ç –∫–æ–Ω—Ñ–∏–≥–∞
                self.proxies = [{
                    "host": "185.76.11.214",
                    "port": 80,
                    "username": "krdxwmej-18",
                    "password": "r0ajol0cnax6"
                }]
                logger.warning(f"–§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ {self.config_file} –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fallback –ø—Ä–æ–∫—Å–∏")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}")
            # Fallback –∫ —Å—Ç–∞—Ä–æ–º—É –ø—Ä–æ–∫—Å–∏ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            self.proxies = [{
                "host": "185.76.11.214",
                "port": 80,
                "username": "krdxwmej-18",
                "password": "r0ajol0cnax6"
            }]
    
    def get_proxy_url(self, index: int = None) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç URL –ø—Ä–æ–∫—Å–∏ –ø–æ –∏–Ω–¥–µ–∫—Å—É"""
        if not self.proxies:
            return None
        
        if index is None:
            index = self.current_index
            
        if 0 <= index < len(self.proxies):
            proxy = self.proxies[index]
            return f"http://{proxy['username']}:{proxy['password']}@{proxy['host']}:{proxy['port']}"
        return None
    
    def get_proxy_info(self, index: int = None) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∫—Å–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not self.proxies:
            return "No proxy"
        
        if index is None:
            index = self.current_index
            
        if 0 <= index < len(self.proxies):
            proxy = self.proxies[index]
            return f"{proxy['host']}:{proxy['port']} (user: {proxy['username'][:8]}...)"
        return "Unknown proxy"
    
    def get_next_proxy(self) -> Tuple[str, int]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏ –∏ –µ–≥–æ –∏–Ω–¥–µ–∫—Å"""
        if not self.proxies:
            return None, -1
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø—Ä–æ–∫—Å–∏
        self.current_index = (self.current_index + 1) % len(self.proxies)
        return self.get_proxy_url(), self.current_index
    
    def reset_proxy_attempts(self, index: int):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–∫—Å–∏"""
        if index in self.proxy_attempts:
            self.proxy_attempts[index] = 0
    
    def increment_proxy_attempts(self, index: int) -> int:
        """–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –ø—Ä–æ–∫—Å–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"""
        if index not in self.proxy_attempts:
            self.proxy_attempts[index] = 0
        self.proxy_attempts[index] += 1
        return self.proxy_attempts[index]
    
    def should_try_proxy(self, index: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–æ–±–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏"""
        return self.proxy_attempts.get(index, 0) < self.max_retries_per_proxy
    
    def mark_successful(self, index: int):
        """–û—Ç–º–µ—á–∞–µ—Ç –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π"""
        self.last_successful_proxy = index
        self.reset_proxy_attempts(index)
        if 'proxy_success_info' not in st.session_state:
            st.session_state.proxy_success_info = {}
        st.session_state.proxy_success_info['last_successful_index'] = index
        st.session_state.proxy_success_info['last_successful_info'] = self.get_proxy_info(index)
        st.session_state.proxy_success_info['timestamp'] = datetime.now().isoformat()
        logger.info(f"–ü—Ä–æ–∫—Å–∏ {self.get_proxy_info(index)} —É—Å–ø–µ—à–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
    
    def get_all_proxies(self) -> List[Tuple[str, int]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–æ–∫—Å–∏ —Å –∏—Ö –∏–Ω–¥–µ–∫—Å–∞–º–∏ –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ"""
        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤ –∏ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∏—Ö
        indices = list(range(len(self.proxies)))
        random.shuffle(indices)
        return [(self.get_proxy_url(i), i) for i in indices]
    
    def shuffle_proxies(self):
        """–ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ä–∞–Ω–¥–æ–º–∏–∑–∞—Ü–∏–∏"""
        if len(self.proxies) > 1:
            random.shuffle(self.proxies)
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏—è
            self.proxy_attempts = {i: 0 for i in range(len(self.proxies))}
            logger.info("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω")


# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä ProxyManager
proxy_manager = ProxyManager()

# –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ (–±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã –ø–æ—Å–ª–µ —Ä–µ—Ñ–∞–∫—Ç–æ—Ä–∏–Ω–≥–∞)
def _get_proxy_url():
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º"""
    return proxy_manager.get_proxy_url()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="Topic Maker",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
if 'video_id' not in st.session_state:
    st.session_state.video_id = None
if 'video_title' not in st.session_state:
    st.session_state.video_title = ""
if 'thumbnail_text' not in st.session_state:
    st.session_state.thumbnail_text = ""
if 'transcript' not in st.session_state:
    st.session_state.transcript = ""
if 'transcript_with_timestamps' not in st.session_state:
    st.session_state.transcript_with_timestamps = ""
if 'selected_model' not in st.session_state:
    st.session_state.selected_model = "Claude Sonnet 4.5"
if 'selected_model_preview' not in st.session_state:
    st.session_state.selected_model_preview = "Claude Sonnet 4.5"
if 'show_timestamps' not in st.session_state:
    st.session_state.show_timestamps = False
if 'synopsis_orig' not in st.session_state:
    st.session_state.synopsis_orig = ""
if 'synopsis_red' not in st.session_state:
    st.session_state.synopsis_red = ""
if 'need_rerun' not in st.session_state:
    st.session_state.need_rerun = False
# –•—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ API –∑–∞–ø—Ä–æ—Å–æ–≤
if 'api_history_synopsis_orig' not in st.session_state:
    st.session_state.api_history_synopsis_orig = {}
if 'api_history_synopsis_red' not in st.session_state:
    st.session_state.api_history_synopsis_red = {}
if 'api_history_annotation_orig' not in st.session_state:
    st.session_state.api_history_annotation_orig = {}
if 'api_history_scenario' not in st.session_state:
    st.session_state.api_history_scenario = {}
# –ü–æ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
if 'annotation_orig' not in st.session_state:
    st.session_state.annotation_orig = ""
# –ü–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
if 'scenario' not in st.session_state:
    st.session_state.scenario = ""
# –ü–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
if 'temperature' not in st.session_state:
    st.session_state.temperature = 0.7
if 'use_proxy' not in st.session_state:
    st.session_state.use_proxy = True
if 'transcript_method' not in st.session_state:
    st.session_state.transcript_method = "yt-dlp"
if 'subtitle_language' not in st.session_state:
    st.session_state.subtitle_language = "en"  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
# –ü–æ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏
if 'summary' not in st.session_state:
    st.session_state.summary = ""
if 'api_history_summary' not in st.session_state:
    st.session_state.api_history_summary = {}
# –ü–æ–ª—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
if 'comment_on_video' not in st.session_state:
    st.session_state.comment_on_video = ""
if 'api_history_comment_on_video' not in st.session_state:
    st.session_state.api_history_comment_on_video = {}
if 'reply_to_comment' not in st.session_state:
    st.session_state.reply_to_comment = ""
if 'api_history_reply_to_comment' not in st.session_state:
    st.session_state.api_history_reply_to_comment = {}
# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–∫—Å–∏ –∏ –ø–æ–ø—ã—Ç–∫–∞—Ö –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
if 'proxy_success_info' not in st.session_state:
    st.session_state.proxy_success_info = {}
if 'transcript_attempts_log' not in st.session_state:
    st.session_state.transcript_attempts_log = []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –≤–∏–¥–µ–æ –∏–∑ URL YouTube
def extract_video_id(url):
    if not url:
        return None
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —Ç–æ–ª—å–∫–æ ID –≤–∏–¥–µ–æ
    if len(url) == 11 and re.match(r'^[A-Za-z0-9_-]{11}$', url):
        return url
    
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è ID –∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ URL YouTube
    youtube_regex = (
        r'(?:youtube\.com\/(?:[^\/]+\/.+\/|(?:v|e(?:mbed)?)\/|.*[?&]v=)|youtu\.be\/)([^"&?\/\s]{11})'
    )
    match = re.search(youtube_regex, url)
    if match:
        return match.group(1)
    return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∏–¥–µ–æ
def get_video_title(video_id):
    api_keys = []
    # –ü–æ–ª—É—á–µ–Ω–∏–µ API –∫–ª—é—á–µ–π –∏–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤
    i = 1
    while True:
        key_name = f"YOUTUBE_API_KEY_{i}"
        try:
            if key_name in st.secrets:
                api_keys.append(st.secrets[key_name])
                i += 1
            else:
                break
        except:
            break
    
    if not api_keys:
        return f"–í–∏–¥–µ–æ ID: {video_id}"
    
    # –ü—Ä–æ–±—É–µ–º –∫–∞–∂–¥—ã–π –∫–ª—é—á –ø–æ –æ—á–µ—Ä–µ–¥–∏
    for api_key in api_keys:
        try:
            youtube = build('youtube', 'v3', developerKey=api_key)
            request = youtube.videos().list(
                part="snippet",
                id=video_id
            )
            response = request.execute()
            
            if response['items']:
                return response['items'][0]['snippet']['title']
            else:
                return "–í–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
        except HttpError as e:
            if "quota" in str(e).lower():
                continue  # –ü—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∫–ª—é—á, –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∞ –∫–≤–æ—Ç–∞
            else:
                return f"–û—à–∏–±–∫–∞: {str(e)[:100]}"
    
    return "–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–ª–∏ –∫–≤–æ—Ç—É"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt-dlp
def get_video_transcript_ytdlp(video_id: str) -> Tuple[str, str]:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ —á–µ—Ä–µ–∑ yt-dlp —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø—Ä–æ–∫—Å–∏
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—Ç–µ–∫—Å—Ç_–±–µ–∑_–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö_–º–µ—Ç–æ–∫, —Ç–µ–∫—Å—Ç_—Å_–≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏_–º–µ—Ç–∫–∞–º–∏)
    """
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    selected_lang = st.session_state.get('subtitle_language', 'en')
    
    # –û—á–∏—â–∞–µ–º –ª–æ–≥ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    st.session_state.transcript_attempts_log = []
    
    # –ë–∞–∑–æ–≤—ã–µ –æ–ø—Ü–∏–∏ yt-dlp
    base_ydl_opts = {
        'quiet': True,
        'no_warnings': True,
        'extract_flat': False,
        'skip_download': True,
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤
        'writesubtitles': False,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
        'writeautomaticsub': False,  # –ù–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª—ã
        'subtitlesformat': 'json3/srv1/srv2/srv3/ttml/vtt',
        'subtitleslangs': [selected_lang],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        'nocheckcertificate': True,
        'geo_bypass': True,
        'geo_bypass_country': 'US',
        'user_agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36',
        'referer': 'https://www.youtube.com/',
    }
    
    # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
    if not st.session_state.get('use_proxy', False):
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
        st.session_state.transcript_attempts_log.append({
            'proxy': 'Direct connection (no proxy)',
            'attempt': 1,
            'timestamp': datetime.now().isoformat()
        })
        
        with yt_dlp.YoutubeDL(base_ydl_opts) as ydl:
            try:
                info = ydl.extract_info(
                    f'https://www.youtube.com/watch?v={video_id}', 
                    download=False
                )
                result = _process_subtitles_info(info, selected_lang)
                if result[0] and not result[0].startswith("–°—É–±—Ç–∏—Ç—Ä—ã –Ω–∞") and not result[0].startswith("–ù–µ —É–¥–∞–ª–æ—Å—å"):
                    st.session_state.transcript_attempts_log[-1]['success'] = True
                    logger.info("–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
                    return result
            except Exception as e:
                st.session_state.transcript_attempts_log[-1]['error'] = str(e)
                logger.warning(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –±–µ–∑ –ø—Ä–æ–∫—Å–∏: {e}")
    
    # –ü—Ä–æ–±—É–µ–º —Å –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
    all_proxies = proxy_manager.get_all_proxies()
    total_attempts = 0
    max_total_attempts = len(all_proxies) * proxy_manager.max_retries_per_proxy
    
    for proxy_round in range(proxy_manager.max_retries_per_proxy):
        for proxy_url, proxy_index in all_proxies:
            if not proxy_manager.should_try_proxy(proxy_index):
                continue
                
            total_attempts += 1
            proxy_info = proxy_manager.get_proxy_info(proxy_index)
            
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ {total_attempts}/{max_total_attempts} —Å –ø—Ä–æ–∫—Å–∏: {proxy_info}")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –≤ –ª–æ–≥
            attempt_log = {
                'proxy': proxy_info,
                'attempt': total_attempts,
                'timestamp': datetime.now().isoformat(),
                'proxy_index': proxy_index
            }
            st.session_state.transcript_attempts_log.append(attempt_log)
            
            # –ö–æ–ø–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–∫—Å–∏
            ydl_opts = base_ydl_opts.copy()
            ydl_opts['proxy'] = proxy_url
            
            with yt_dlp.YoutubeDL(ydl_opts) as ydl:
                try:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
                    info = ydl.extract_info(
                        f'https://www.youtube.com/watch?v={video_id}', 
                        download=False
                    )
                    
                    result = _process_subtitles_info(info, selected_lang)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å–ø–µ—à–Ω–æ –ª–∏ –ø–æ–ª—É—á–µ–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã
                    if result[0] and not result[0].startswith("–°—É–±—Ç–∏—Ç—Ä—ã –Ω–∞") and not result[0].startswith("–ù–µ —É–¥–∞–ª–æ—Å—å"):
                        # –£—Å–ø–µ—Ö! –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π
                        proxy_manager.mark_successful(proxy_index)
                        st.session_state.transcript_attempts_log[-1]['success'] = True
                        logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Å –ø—Ä–æ–∫—Å–∏ {proxy_info} (–ø–æ–ø—ã—Ç–∫–∞ {total_attempts})")
                        return result
                    else:
                        st.session_state.transcript_attempts_log[-1]['error'] = "–°—É–±—Ç–∏—Ç—Ä—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã"
                        
                except Exception as e:
                    error_msg = str(e)
                    st.session_state.transcript_attempts_log[-1]['error'] = error_msg
                    logger.warning(f"–û—à–∏–±–∫–∞ —Å –ø—Ä–æ–∫—Å–∏ {proxy_info}: {error_msg}")
                    
                    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ–∫—Å–∏
                    proxy_manager.increment_proxy_attempts(proxy_index)
                    
                    # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏, –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–∫—Å–∏
                    if "HTTP Error 429" in error_msg or "too many requests" in error_msg.lower():
                        logger.info(f"–ü—Ä–æ–∫—Å–∏ {proxy_info} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É")
                        continue
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ø–æ—Å–ª–µ {total_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    lang_names = {'en': '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º', 'es': '–∏—Å–ø–∞–Ω—Å–∫–æ–º', 'pt': '–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–º', 'ru': '—Ä—É—Å—Å–∫–æ–º'}
    lang_name = lang_names.get(selected_lang, selected_lang)
    return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ø–æ—Å–ª–µ {total_attempts} –ø–æ–ø—ã—Ç–æ–∫", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ø–æ—Å–ª–µ {total_attempts} –ø–æ–ø—ã—Ç–æ–∫"


def _process_subtitles_info(info: dict, selected_lang: str) -> Tuple[str, str]:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É–±—Ç–∏—Ç—Ä–∞—Ö –∏–∑ yt-dlp"""
    try:
        # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: 1) –æ–±—ã—á–Ω—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã 2) –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ
        subtitles = info.get('subtitles', {})
        automatic_captions = info.get('automatic_captions', {})
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º –æ–±–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        all_subs = {**automatic_captions, **subtitles}
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        if selected_lang in all_subs and all_subs[selected_lang]:
            # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            for sub_format in all_subs[selected_lang]:
                if sub_format.get('url'):
                    return _fetch_and_parse_subtitles(
                        sub_format['url'], 
                        sub_format.get('ext', 'json3')
                    )
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
        lang_names = {'en': '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º', 'es': '–∏—Å–ø–∞–Ω—Å–∫–æ–º', 'pt': '–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–º', 'ru': '—Ä—É—Å—Å–∫–æ–º'}
        lang_name = lang_names.get(selected_lang, selected_lang)
        return f"–°—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ {lang_name} —è–∑—ã–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ", f"–°—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ {lang_name} —è–∑—ã–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã"


def _fetch_and_parse_subtitles(url: str, format_type: str) -> Tuple[str, str]:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∏ –ø–∞—Ä—Å–∏—Ç —Å—É–±—Ç–∏—Ç—Ä—ã —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ–∫—Å–∏ –∏–∑ ProxyManager"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ–∫—Å–∏ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
        proxies = {}
        if st.session_state.get('use_proxy', False):
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏ –∏–∑ ProxyManager
            proxy_url = proxy_manager.get_proxy_url()
            if proxy_url:
                proxies = {'http': proxy_url, 'https': proxy_url}
                logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {proxy_manager.get_proxy_info()}")
            else:
                logger.warning("ProxyManager –Ω–µ –≤–µ—Ä–Ω—É–ª –ø—Ä–æ–∫—Å–∏ URL")
        else:
            logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
        
        response = requests.get(url, proxies=proxies, timeout=proxy_manager.request_timeout)
        response.raise_for_status()
        
        # –ü–∞—Ä—Å–∏–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
        if 'json' in format_type:
            return _parse_json_subtitles(response.text)
        elif 'vtt' in format_type:
            return _parse_vtt_subtitles(response.text)
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –∫–∞–∫ JSON
            return _parse_json_subtitles(response.text)
            
    except requests.exceptions.ProxyError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
        return "–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤", "–û—à–∏–±–∫–∞ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"
    except requests.exceptions.Timeout as e:
        logger.error(f"–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
        return "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤", "–¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
        return "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤", "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤"


def _parse_json_subtitles(content: str) -> Tuple[str, str]:
    """–ü–∞—Ä—Å–∏—Ç JSON3 —Ñ–æ—Ä–º–∞—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤ YouTube"""
    try:
        data = json.loads(content)
        
        full_text = []
        text_with_timestamps = []
        
        for event in data.get('events', []):
            if 'segs' not in event:
                continue
                
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            text = ''.join([seg.get('utf8', '') for seg in event['segs'] if 'utf8' in seg])
            text = text.strip()
            
            if text:
                full_text.append(text)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
                start_ms = event.get('tStartMs', 0)
                start_seconds = start_ms / 1000
                time_str = _format_time(start_seconds)
                text_with_timestamps.append(f"[{time_str}] {text}")
        
        return '\n'.join(full_text), '\n'.join(text_with_timestamps)
        
    except json.JSONDecodeError:
        # –ï—Å–ª–∏ –Ω–µ JSON, –ø—Ä–æ–±—É–µ–º –∫–∞–∫ plain text
        lines = content.split('\n')
        return '\n'.join(lines), '\n'.join(lines)


def _parse_vtt_subtitles(content: str) -> Tuple[str, str]:
    """–ü–∞—Ä—Å–∏—Ç VTT —Ñ–æ—Ä–º–∞—Ç —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
    lines = content.split('\n')
    
    full_text = []
    text_with_timestamps = []
    
    i = 0
    while i < len(lines):
        line = lines[i].strip()
        
        # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ (00:00:00.000 --> 00:00:00.000)
        if '-->' in line:
            time_match = re.match(r'(\d{2}:\d{2}:\d{2})', line)
            if time_match:
                timestamp = time_match.group(1)
                
                # –°–ª–µ–¥—É—é—â–∏–µ —Å—Ç—Ä–æ–∫–∏ - —Ç–µ–∫—Å—Ç
                i += 1
                text_lines = []
                while i < len(lines) and lines[i].strip() and '-->' not in lines[i]:
                    text_lines.append(lines[i].strip())
                    i += 1
                
                if text_lines:
                    text = ' '.join(text_lines)
                    full_text.append(text)
                    text_with_timestamps.append(f"[{timestamp}] {text}")
                continue
        i += 1
    
    return '\n'.join(full_text), '\n'.join(text_with_timestamps)


def _format_time(seconds: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ MM:SS –∏–ª–∏ HH:MM:SS"""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = int(seconds % 60)
    
    if hours > 0:
        return f"{hours:02d}:{minutes:02d}:{secs:02d}"
    else:
        return f"{minutes:02d}:{secs:02d}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —á–µ—Ä–µ–∑ YouTubeTranscriptApi)
def get_video_transcript_api(video_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ YouTubeTranscriptApi —Å —Ä–æ—Ç–∞—Ü–∏–µ–π –ø—Ä–æ–∫—Å–∏"""
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫
    selected_lang = st.session_state.get('subtitle_language', 'en')
    
    # –û—á–∏—â–∞–µ–º –ª–æ–≥ –ø–æ–ø—ã—Ç–æ–∫ –¥–ª—è –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    st.session_state.transcript_attempts_log = []
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ø—ã—Ç–∫–∏ –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —Å –∑–∞–¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–∫—Å–∏
    def try_get_transcript(proxies_dict=None, proxy_info="Direct connection"):
        try:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä API
            api = YouTubeTranscriptApi()
            transcript_data = None
            
            # –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
            try:
                if proxies_dict:
                    transcript_data = YouTubeTranscriptApi.get_transcript(
                        video_id,
                        languages=[selected_lang],
                        proxies=proxies_dict
                    )
                else:
                    transcript_data = api.fetch(video_id, languages=[selected_lang])
            except:
                transcript_data = None
            
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ, –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—É–±—Ç–∏—Ç—Ä—ã
            if not transcript_data:
                try:
                    if proxies_dict:
                        transcript_list = YouTubeTranscriptApi.list_transcripts(video_id, proxies=proxies_dict)
                    else:
                        transcript_list = YouTubeTranscriptApi.list_transcripts(video_id)
                    
                    # –ò—â–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
                    for transcript in transcript_list:
                        if transcript.language_code == selected_lang:
                            if proxies_dict:
                                transcript_data = transcript.fetch(proxies=proxies_dict)
                            else:
                                transcript_data = transcript.fetch()
                            break
                except:
                    pass
            
            return transcript_data
            
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Å {proxy_info}: {str(e)}")
            return None
    
    # –ï—Å–ª–∏ –ø—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã, –ø—Ä–æ–±—É–µ–º –Ω–∞–ø—Ä—è–º—É—é
    if not st.session_state.get('use_proxy', False):
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ API –±–µ–∑ –ø—Ä–æ–∫—Å–∏")
        st.session_state.transcript_attempts_log.append({
            'proxy': 'Direct connection (no proxy)',
            'attempt': 1,
            'timestamp': datetime.now().isoformat()
        })
        
        transcript_data = try_get_transcript(None, "Direct connection")
        if transcript_data:
            st.session_state.transcript_attempts_log[-1]['success'] = True
            return _format_transcript_data(transcript_data)
        else:
            st.session_state.transcript_attempts_log[-1]['error'] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é"
    
    # –ü—Ä–æ–±—É–µ–º —Å –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ —Å —Ä–æ—Ç–∞—Ü–∏–µ–π
    all_proxies = proxy_manager.get_all_proxies()
    total_attempts = 0
    max_total_attempts = len(all_proxies) * proxy_manager.max_retries_per_proxy
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
    old_env_proxies = {
        'HTTP_PROXY': os.environ.get('HTTP_PROXY'),
        'HTTPS_PROXY': os.environ.get('HTTPS_PROXY'),
        'http_proxy': os.environ.get('http_proxy'),
        'https_proxy': os.environ.get('https_proxy'),
        'ALL_PROXY': os.environ.get('ALL_PROXY'),
        'all_proxy': os.environ.get('all_proxy')
    }
    
    try:
        for proxy_round in range(proxy_manager.max_retries_per_proxy):
            for proxy_url, proxy_index in all_proxies:
                if not proxy_manager.should_try_proxy(proxy_index):
                    continue
                
                total_attempts += 1
                proxy_info = proxy_manager.get_proxy_info(proxy_index)
                
                logger.info(f"API –ø–æ–ø—ã—Ç–∫–∞ {total_attempts}/{max_total_attempts} —Å –ø—Ä–æ–∫—Å–∏: {proxy_info}")
                
                # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫—É –≤ –ª–æ–≥
                attempt_log = {
                    'proxy': proxy_info,
                    'attempt': total_attempts,
                    'timestamp': datetime.now().isoformat(),
                    'proxy_index': proxy_index
                }
                st.session_state.transcript_attempts_log.append(attempt_log)
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–∫—Å–∏
                os.environ['HTTP_PROXY'] = proxy_url
                os.environ['HTTPS_PROXY'] = proxy_url
                os.environ['http_proxy'] = proxy_url
                os.environ['https_proxy'] = proxy_url
                os.environ['ALL_PROXY'] = proxy_url
                os.environ['all_proxy'] = proxy_url
                
                # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è —è–≤–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏
                proxies_dict = {"http": proxy_url, "https": proxy_url}
                
                transcript_data = try_get_transcript(proxies_dict, proxy_info)
                
                if transcript_data:
                    # –£—Å–ø–µ—Ö! –û—Ç–º–µ—á–∞–µ–º –ø—Ä–æ–∫—Å–∏ –∫–∞–∫ —É—Å–ø–µ—à–Ω—ã–π
                    proxy_manager.mark_successful(proxy_index)
                    st.session_state.transcript_attempts_log[-1]['success'] = True
                    logger.info(f"–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —á–µ—Ä–µ–∑ API —Å –ø—Ä–æ–∫—Å–∏ {proxy_info} (–ø–æ–ø—ã—Ç–∫–∞ {total_attempts})")
                    return _format_transcript_data(transcript_data)
                else:
                    st.session_state.transcript_attempts_log[-1]['error'] = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é"
                    proxy_manager.increment_proxy_attempts(proxy_index)
    
    finally:
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ –ø—Ä–æ–∫—Å–∏
        for key, value in old_env_proxies.items():
            if value is None:
                os.environ.pop(key, None)
            else:
                os.environ[key] = value
    
    # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã
    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é —á–µ—Ä–µ–∑ API –ø–æ—Å–ª–µ {total_attempts} –ø–æ–ø—ã—Ç–æ–∫")
    lang_names = {'en': '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º', 'es': '–∏—Å–ø–∞–Ω—Å–∫–æ–º', 'pt': '–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–º', 'ru': '—Ä—É—Å—Å–∫–æ–º'}
    lang_name = lang_names.get(selected_lang, selected_lang)
    return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ø–æ—Å–ª–µ {total_attempts} –ø–æ–ø—ã—Ç–æ–∫", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –ø–æ—Å–ª–µ {total_attempts} –ø–æ–ø—ã—Ç–æ–∫"


def _format_transcript_data(transcript_data):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –¥–≤–∞ —Ñ–æ—Ä–º–∞—Ç–∞: —Å –∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫"""
    if transcript_data:
        # –£–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª—è–º –¥–ª—è –¥–≤—É—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ (list[dict] –∏ FetchedTranscript)
        def _get_text(entry):
            try:
                return str(entry.get('text', ''))
            except Exception:
                return str(getattr(entry, 'text', ''))
        def _get_start(entry):
            try:
                return float(entry.get('start', 0))
            except Exception:
                return float(getattr(entry, 'start', 0))
        
        # –í–µ—Ä—Å–∏—è –±–µ–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        full_text = '\n'.join([_get_text(entry) for entry in transcript_data])
        
        # –í–µ—Ä—Å–∏—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
        def format_time(seconds):
            """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç MM:SS –∏–ª–∏ HH:MM:SS"""
            hours = int(seconds // 3600)
            minutes = int((seconds % 3600) // 60)
            secs = int(seconds % 60)
            if hours > 0:
                return f"{hours:02d}:{minutes:02d}:{secs:02d}"
            else:
                return f"{minutes:02d}:{secs:02d}"
        
        text_with_timestamps = []
        for entry in transcript_data:
            start_time = _get_start(entry)
            text = _get_text(entry)
            text_with_timestamps.append(f"[{format_time(start_time)}] {text}")
        
        full_text_with_timestamps = '\n'.join(text_with_timestamps)
        
        return full_text, full_text_with_timestamps
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ —Å—É–±—Ç–∏—Ç—Ä—ã
        selected_lang = st.session_state.get('subtitle_language', 'en')
        lang_names = {'en': '–∞–Ω–≥–ª–∏–π—Å–∫–æ–º', 'es': '–∏—Å–ø–∞–Ω—Å–∫–æ–º', 'pt': '–ø–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–æ–º', 'ru': '—Ä—É—Å—Å–∫–æ–º'}
        lang_name = lang_names.get(selected_lang, selected_lang)
        return f"–°—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ {lang_name} —è–∑—ã–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ", f"–°—É–±—Ç–∏—Ç—Ä—ã –Ω–∞ {lang_name} —è–∑—ã–∫–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –≤–∏–¥–µ–æ"


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–≤—ã–±–∏—Ä–∞–µ—Ç –º–µ—Ç–æ–¥)
def get_video_transcript(video_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É—è –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥"""
    if st.session_state.get('transcript_method') == 'yt-dlp':
        return get_video_transcript_ytdlp(video_id)
    else:
        return get_video_transcript_api(video_id)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–µ–≤—å—é —á–µ—Ä–µ–∑ Claude API
def get_thumbnail_text(video_id):
    try:
        # –ü–æ–ª—É—á–∞–µ–º URL –ø—Ä–µ–≤—å—é
        thumbnail_url = f"https://i.ytimg.com/vi/{video_id}/maxresdefault.jpg"
        response = requests.get(thumbnail_url)
        
        # –ï—Å–ª–∏ maxresdefault –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–±—É–µ–º hqdefault
        if response.status_code != 200:
            thumbnail_url = f"https://i.ytimg.com/vi/{video_id}/hqdefault.jpg"
            response = requests.get(thumbnail_url)
            
        if response.status_code != 200:
            return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ"
        
        # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image = Image.open(io.BytesIO(response.content))
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        buffered = io.BytesIO()
        image.save(buffered, format="JPEG")
        img_base64 = base64.b64encode(buffered.getvalue()).decode()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        try:
            with open("prompt_get_thumbnail_text.txt", "r", encoding="utf-8") as file:
                prompt_text = file.read()
        except FileNotFoundError:
            return "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª prompt_get_thumbnail_text.txt"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Claude
        if "ANTHROPIC_API_KEY" not in st.secrets:
            # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–∞—Ö
            available_keys = list(st.secrets.keys()) if hasattr(st.secrets, 'keys') else []
            return f"API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {available_keys}"
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç
        api_key = str(st.secrets["ANTHROPIC_API_KEY"])
        if not api_key or not api_key.startswith("sk-"):
            return f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç API –∫–ª—é—á–∞ Anthropic (–¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å 'sk-')"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç —Ç–æ–ª—å–∫–æ —Å API –∫–ª—é—á–æ–º, –∏–∑–±–µ–≥–∞—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ—Ç Streamlit
        import anthropic as anthropic_module
        client = anthropic_module.Anthropic(api_key=api_key)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude
        message = client.messages.create(
            model=get_claude_model_preview(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            max_tokens=1000,
            messages=[
                {
                    "role": "user",
                    "content": [
                        {
                            "type": "text",
                            "text": prompt_text
                        },
                        {
                            "type": "image",
                            "source": {
                                "type": "base64",
                                "media_type": "image/jpeg",
                                "data": img_base64
                            }
                        }
                    ]
                }
            ]
        )
        
        return message.content[0].text
    except Exception as e:
        # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–µ–≤—å—é: {str(e)}"
        if "api_key" in str(e).lower():
            error_msg = "–ü—Ä–æ–±–ª–µ–º–∞ —Å API –∫–ª—é—á–æ–º Anthropic. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö."
        return error_msg

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏ Claude
def get_claude_model():
    model_mapping = {
        "Claude Opus 4.1": "claude-opus-4-1-20250805",
        "Claude Opus 4": "claude-opus-4-20250514",
        "Claude Sonnet 4.5": "claude-sonnet-4-5-20250929",
        "Claude Sonnet 4": "claude-sonnet-4-20250514",
        "Claude Sonnet 3.7": "claude-3-7-sonnet-20250219"
    }
    return model_mapping[st.session_state.selected_model]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ Claude –¥–ª—è –ø—Ä–µ–≤—å—é
def get_claude_model_preview():
    model_mapping = {
        "Claude Opus 4.1": "claude-opus-4-1-20250805",
        "Claude Opus 4": "claude-opus-4-20250514",
        "Claude Sonnet 4.5": "claude-sonnet-4-5-20250929",
        "Claude Sonnet 4": "claude-sonnet-4-20250514",
        "Claude Sonnet 3.7": "claude-3-7-sonnet-20250219"
    }
    return model_mapping[st.session_state.selected_model_preview]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏
def get_max_tokens():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
    if st.session_state.selected_model in ["Claude Opus 4.1", "Claude Opus 4"]:
        return 32000  # 32K —Ç–æ–∫–µ–Ω–æ–≤
    elif st.session_state.selected_model in ["Claude Sonnet 4.5", "Claude Sonnet 4"]:
        return 64000  # 64K —Ç–æ–∫–µ–Ω–æ–≤
    else:  # Claude Sonnet 3.7
        return 64000  # 64K —Ç–æ–∫–µ–Ω–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –º–æ–¥–µ–ª–∏ –ø—Ä–µ–≤—å—é
def get_max_tokens_preview():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏ –ø—Ä–µ–≤—å—é"""
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ª–∏–º–∏—Ç—ã –¥–ª—è –Ω–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π
    if st.session_state.selected_model_preview in ["Claude Opus 4.1", "Claude Opus 4"]:
        return 32000  # 32K —Ç–æ–∫–µ–Ω–æ–≤
    elif st.session_state.selected_model_preview in ["Claude Sonnet 4.5", "Claude Sonnet 4"]:
        return 64000  # 64K —Ç–æ–∫–µ–Ω–æ–≤
    else:  # Claude Sonnet 3.7
        return 64000  # 64K —Ç–æ–∫–µ–Ω–æ–≤

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
def get_model_info():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–∞—Ö –æ–∫–æ–Ω –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏"""
    model_info = {
        "Claude Opus 4.1": {
            "input_window": "200K",
            "output_window": "32K",
            "input_cost": "$15",
            "output_cost": "$75"
        },
        "Claude Opus 4": {
            "input_window": "200K",
            "output_window": "32K", 
            "input_cost": "$15",
            "output_cost": "$75"
        },
        "Claude Sonnet 4.5": {
            "input_window": "200K",
            "output_window": "64K",
            "input_cost": "$3",
            "output_cost": "$15"
        },
        "Claude Sonnet 4": {
            "input_window": "200K",
            "output_window": "64K",
            "input_cost": "$3",
            "output_cost": "$15"
        },
        "Claude Sonnet 3.7": {
            "input_window": "200K",
            "output_window": "64K",
            "input_cost": "$3",
            "output_cost": "$15"
        }
    }
    return model_info.get(st.session_state.selected_model, {})

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–Ω–æ–ø—Å–∏—Å–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
def create_synopsis_orig():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∏–Ω–æ–ø—Å–∏—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript = st.session_state.get('transcript', '')
        if not transcript:
            return None, "–ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–Ω–æ–ø—Å–∏—Å–∞"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
        try:
            with open("prompt_synopsis_orig.txt", "r", encoding="utf-8") as file:
                prompt_text = file.read()
        except FileNotFoundError:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª prompt_synopsis_orig.txt"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if "ANTHROPIC_API_KEY" not in st.secrets:
            return None, "API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Claude
        api_key = str(st.secrets["ANTHROPIC_API_KEY"])
        client = anthropic.Anthropic(api_key=api_key)
        
        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limit
        max_retries = 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        base_delay = 10  # –ù–∞—á–∏–Ω–∞–µ–º —Å –º–µ–Ω—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        
        for attempt in range(max_retries):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt > 0:
                    wait_time = base_delay * (2 ** (attempt - 1))  # 10, 20, 40, 80 —Å–µ–∫—É–Ω–¥
                    st.info(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_time)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –ª–∏–º–∏—Ç–æ–º —Ç–æ–∫–µ–Ω–æ–≤ –∏ streaming
                stream = client.messages.create(
                    model=get_claude_model(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å, –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    max_tokens=get_max_tokens(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
                    temperature=st.session_state.get('temperature', 0.7),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
                    system=prompt_text,
                    messages=[
                        {
                            "role": "user",
                            "content": transcript
                        }
                    ],
                    stream=True  # –ò—Å–ø–æ–ª—å–∑—É–µ–º streaming –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                )
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ streaming response
                result = ""
                for event in stream:
                    if event.type == "content_block_delta":
                        result += event.delta.text
                    elif event.type == "message_stop":
                        break
                print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Å–∏–Ω–æ–ø—Å–∏—Å –¥–ª–∏–Ω–æ–π {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–∏–Ω–æ–ø—Å–∏—Å–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
                st.session_state.api_history_synopsis_orig = {
                    'request': {
                        'model': get_claude_model(),
                        'max_tokens': get_max_tokens(),
                        'temperature': st.session_state.get('temperature', 0.7),
                        'system_prompt': prompt_text[:500] + "..." if len(prompt_text) > 500 else prompt_text,
                        'user_message': transcript[:500] + "..." if len(transcript) > 500 else transcript,
                        'full_system_prompt': prompt_text,
                        'full_user_message': transcript
                    },
                    'response': result
                }
                
                return result, None
                
            except anthropic.RateLimitError as e:
                error_details = str(e)
                if "input tokens" in error_details.lower():
                    # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
                    if attempt < max_retries - 1:
                        st.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries} —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
                        continue
                    else:
                        return None, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –º–µ–Ω—å—à–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                else:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        
            except Exception as e:
                error_str = str(e)
                if "rate_limit" in error_str.lower() or "429" in error_str:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π."
                elif "timeout" in error_str.lower():
                    if attempt < max_retries - 1:
                        st.warning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                else:
                    return None, f"–û—à–∏–±–∫–∞: {error_str[:200]}"
                    
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∏–Ω–æ–ø—Å–∏—Å–∞: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞
def create_synopsis_red(synopsis_orig):
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞
        if not synopsis_orig:
            return None, "–ù–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
        try:
            with open("prompt_synopsis_red.txt", "r", encoding="utf-8") as file:
                prompt_text = file.read()
        except FileNotFoundError:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª prompt_synopsis_red.txt"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if "ANTHROPIC_API_KEY" not in st.secrets:
            return None, "API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Claude
        api_key = str(st.secrets["ANTHROPIC_API_KEY"])
        client = anthropic.Anthropic(api_key=api_key)
        
        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limit
        max_retries = 5  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫
        base_delay = 10  # –ù–∞—á–∏–Ω–∞–µ–º —Å –º–µ–Ω—å—à–µ–π –∑–∞–¥–µ—Ä–∂–∫–∏
        
        for attempt in range(max_retries):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt > 0:
                    wait_time = base_delay * (2 ** (attempt - 1))  # 10, 20, 40, 80 —Å–µ–∫—É–Ω–¥
                    st.info(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_time)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude —Å streaming
                stream = client.messages.create(
                    model=get_claude_model(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å, –≤—ã–±—Ä–∞–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
                    max_tokens=get_max_tokens(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
                    temperature=st.session_state.get('temperature', 0.7),
                    system=prompt_text,
                    messages=[
                        {
                            "role": "user",
                            "content": synopsis_orig
                        }
                    ],
                    stream=True  # –ò—Å–ø–æ–ª—å–∑—É–µ–º streaming –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                )
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ streaming response
                result = ""
                for event in stream:
                    if event.type == "content_block_delta":
                        result += event.delta.text
                    elif event.type == "message_stop":
                        break
                print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Å–∏–Ω–æ–ø—Å–∏—Å –¥–ª–∏–Ω–æ–π {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞
                st.session_state.api_history_synopsis_red = {
                    'request': {
                        'model': get_claude_model(),
                        'max_tokens': get_max_tokens(),
                        'temperature': st.session_state.get('temperature', 0.7),
                        'system_prompt': prompt_text[:500] + "..." if len(prompt_text) > 500 else prompt_text,
                        'user_message': synopsis_orig[:500] + "..." if len(synopsis_orig) > 500 else synopsis_orig,
                        'full_system_prompt': prompt_text,
                        'full_user_message': synopsis_orig
                    },
                    'response': result
                }
                
                return result, None
                
            except anthropic.RateLimitError as e:
                error_details = str(e)
                if "input tokens" in error_details.lower():
                    if attempt < max_retries - 1:
                        st.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries} —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
                        continue
                    else:
                        return None, "–°–∏–Ω–æ–ø—Å–∏—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                else:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        
            except Exception as e:
                error_str = str(e)
                if "rate_limit" in error_str.lower() or "429" in error_str:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π."
                elif "timeout" in error_str.lower():
                    if attempt < max_retries - 1:
                        st.warning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                else:
                    return None, f"–û—à–∏–±–∫–∞: {error_str[:200]}"
                    
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é
def create_thumbnail_variants(thumbnail_text, synopsis_red):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–µ–≤—å—é –∏ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        if not thumbnail_text:
            return None, "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–µ–≤—å—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
        if not synopsis_red:
            return None, "–ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
        try:
            with open("prompt_generate_thumbnail_texts.txt", "r", encoding="utf-8") as file:
                prompt_text = file.read()
        except FileNotFoundError:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª prompt_generate_thumbnail_texts.txt"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if "ANTHROPIC_API_KEY" not in st.secrets:
            return None, "API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Claude
        api_key = str(st.secrets["ANTHROPIC_API_KEY"])
        client = anthropic.Anthropic(api_key=api_key)
        
        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limit
        max_retries = 5
        base_delay = 10
        
        for attempt in range(max_retries):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt > 0:
                    wait_time = base_delay * (2 ** (attempt - 1))
                    st.info(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_time)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –º–æ–¥–µ–ª–∏
                user_message = f"Thumbnail reference text:\n{thumbnail_text}\n\nStory synopsis:\n{synopsis_red}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude —Å streaming
                stream = client.messages.create(
                    model=get_claude_model_preview(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–µ–≤—å—é
                    max_tokens=get_max_tokens_preview(),  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ª–∏–º–∏—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
                    temperature=st.session_state.get('temperature_preview', 0.7),
                    system=prompt_text,
                    messages=[
                        {
                            "role": "user",
                            "content": user_message
                        }
                    ],
                    stream=True  # –ò—Å–ø–æ–ª—å–∑—É–µ–º streaming –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
                )
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ streaming response
                result = ""
                for chunk in stream:
                    if chunk.type == "content_block_delta":
                        result += chunk.delta.text
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –≤ session_state
                st.session_state.api_history_thumbnail_variants = {
                    'request': {
                        'model': get_claude_model_preview(),
                        'max_tokens': get_max_tokens_preview(),
                        'temperature': st.session_state.get('temperature_preview', 0.7),
                        'system_prompt': prompt_text[:500] + "..." if len(prompt_text) > 500 else prompt_text,
                        'user_message': user_message[:500] + "..." if len(user_message) > 500 else user_message,
                        'full_system_prompt': prompt_text,
                        'full_user_message': user_message
                    },
                    'response': result
                }
                
                return result, None
                
            except anthropic.RateLimitError as e:
                error_details = str(e)
                if "input tokens" in error_details.lower():
                    if attempt < max_retries - 1:
                        st.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries} —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
                        continue
                    else:
                        return None, "–î–∞–Ω–Ω—ã–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∏–µ. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                else:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        
            except Exception as e:
                error_str = str(e)
                if "rate_limit" in error_str.lower() or "429" in error_str:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π."
                elif "timeout" in error_str.lower():
                    if attempt < max_retries - 1:
                        st.warning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                else:
                    return None, f"–û—à–∏–±–∫–∞: {error_str[:200]}"
                    
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
def create_annotation_orig():
    """–°–æ–∑–¥–∞–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript = st.session_state.get('transcript', '')
        if not transcript:
            return None, "–ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
        try:
            with open("prompt_annotation.txt", "r", encoding="utf-8") as file:
                prompt_text = file.read()
        except FileNotFoundError:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª prompt_annotation.txt"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if "ANTHROPIC_API_KEY" not in st.secrets:
            return None, "API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Claude
        api_key = str(st.secrets["ANTHROPIC_API_KEY"])
        client = anthropic.Anthropic(api_key=api_key)
        
        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limit
        max_retries = 5
        base_delay = 10
        
        for attempt in range(max_retries):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt > 0:
                    wait_time = base_delay * (2 ** (attempt - 1))
                    st.info(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_time)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude —Å streaming
                stream = client.messages.create(
                    model=get_claude_model(),
                    max_tokens=get_max_tokens(),
                    temperature=st.session_state.get('temperature', 0.7),
                    system=prompt_text,
                    messages=[
                        {
                            "role": "user",
                            "content": transcript
                        }
                    ],
                    stream=True
                )
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ streaming response
                result = ""
                for event in stream:
                    if event.type == "content_block_delta":
                        result += event.delta.text
                    elif event.type == "message_stop":
                        break
                print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏—è –¥–ª–∏–Ω–æ–π {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
                st.session_state.api_history_annotation_orig = {
                    'request': {
                        'model': get_claude_model(),
                        'max_tokens': get_max_tokens(),
                        'temperature': st.session_state.get('temperature', 0.7),
                        'system_prompt': prompt_text[:500] + "..." if len(prompt_text) > 500 else prompt_text,
                        'user_message': transcript[:500] + "..." if len(transcript) > 500 else transcript,
                        'full_system_prompt': prompt_text,
                        'full_user_message': transcript
                    },
                    'response': result
                }
                
                return result, None
                
            except anthropic.RateLimitError as e:
                error_details = str(e)
                if "input tokens" in error_details.lower():
                    if attempt < max_retries - 1:
                        st.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries} —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
                        continue
                    else:
                        return None, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –º–µ–Ω—å—à–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                else:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        
            except Exception as e:
                error_str = str(e)
                if "rate_limit" in error_str.lower() or "429" in error_str:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π."
                elif "timeout" in error_str.lower():
                    if attempt < max_retries - 1:
                        st.warning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                else:
                    return None, f"–û—à–∏–±–∫–∞: {error_str[:200]}"
                    
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏: {str(e)}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
def create_scenario():
    """–°–æ–∑–¥–∞–µ—Ç —Å—Ü–µ–Ω–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript = st.session_state.get('transcript', '')
        if not transcript:
            return None, "–ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
        try:
            with open("prompt_scenario.txt", "r", encoding="utf-8") as file:
                prompt_text = file.read()
        except FileNotFoundError:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª prompt_scenario.txt"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if "ANTHROPIC_API_KEY" not in st.secrets:
            return None, "API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Claude
        api_key = str(st.secrets["ANTHROPIC_API_KEY"])
        client = anthropic.Anthropic(api_key=api_key)
        
        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limit
        max_retries = 5
        base_delay = 10
        
        for attempt in range(max_retries):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt > 0:
                    wait_time = base_delay * (2 ** (attempt - 1))
                    st.info(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_time)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude —Å streaming
                stream = client.messages.create(
                    model=get_claude_model(),
                    max_tokens=get_max_tokens(),
                    temperature=st.session_state.get('temperature', 0.7),
                    system=prompt_text,
                    messages=[
                        {
                            "role": "user",
                            "content": transcript
                        }
                    ],
                    stream=True
                )
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ streaming response
                result = ""
                for event in stream:
                    if event.type == "content_block_delta":
                        result += event.delta.text
                    elif event.type == "message_stop":
                        break
                print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω —Å—Ü–µ–Ω–∞—Ä–∏–π –¥–ª–∏–Ω–æ–π {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å—Ü–µ–Ω–∞—Ä–∏—è
                st.session_state.api_history_scenario = {
                    'request': {
                        'model': get_claude_model(),
                        'max_tokens': get_max_tokens(),
                        'temperature': st.session_state.get('temperature', 0.7),
                        'system_prompt': prompt_text[:500] + "..." if len(prompt_text) > 500 else prompt_text,
                        'user_message': transcript[:500] + "..." if len(transcript) > 500 else transcript,
                        'full_system_prompt': prompt_text,
                        'full_user_message': transcript
                    },
                    'response': result
                }
                
                return result, None
                
            except anthropic.RateLimitError as e:
                error_details = str(e)
                if "input tokens" in error_details.lower():
                    if attempt < max_retries - 1:
                        st.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries} —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
                        continue
                    else:
                        return None, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –º–µ–Ω—å—à–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                else:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        
            except Exception as e:
                error_str = str(e)
                if "rate_limit" in error_str.lower() or "429" in error_str:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π."
                elif "timeout" in error_str.lower():
                    if attempt < max_retries - 1:
                        st.warning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                else:
                    return None, f"–û—à–∏–±–∫–∞: {error_str[:200]}"
                    
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ü–µ–Ω–∞—Ä–∏—è: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏
def create_summary():
    """–°–æ–∑–¥–∞–µ—Ç —Å–∞–º–º–∞—Ä–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript = st.session_state.get('transcript', '')
        if not transcript:
            return None, "–ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
        try:
            with open("prompt_summary.txt", "r", encoding="utf-8") as file:
                prompt_text = file.read()
        except FileNotFoundError:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª prompt_summary.txt"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if "ANTHROPIC_API_KEY" not in st.secrets:
            return None, "API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Claude
        api_key = str(st.secrets["ANTHROPIC_API_KEY"])
        client = anthropic.Anthropic(api_key=api_key)
        
        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limit
        max_retries = 5
        base_delay = 10
        
        for attempt in range(max_retries):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt > 0:
                    wait_time = base_delay * (2 ** (attempt - 1))
                    st.info(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_time)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude —Å streaming
                stream = client.messages.create(
                    model=get_claude_model(),
                    max_tokens=get_max_tokens(),
                    temperature=st.session_state.get('temperature', 0.7),
                    system=prompt_text,
                    messages=[
                        {
                            "role": "user",
                            "content": transcript
                        }
                    ],
                    stream=True
                )
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ streaming response
                result = ""
                for event in stream:
                    if event.type == "content_block_delta":
                        result += event.delta.text
                    elif event.type == "message_stop":
                        break
                print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω–æ —Å–∞–º–º–∞—Ä–∏ –¥–ª–∏–Ω–æ–π {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —Å–∞–º–º–∞—Ä–∏
                st.session_state.api_history_summary = {
                    'request': {
                        'model': get_claude_model(),
                        'max_tokens': get_max_tokens(),
                        'temperature': st.session_state.get('temperature', 0.7),
                        'system_prompt': prompt_text[:500] + "..." if len(prompt_text) > 500 else prompt_text,
                        'user_message': transcript[:500] + "..." if len(transcript) > 500 else transcript,
                        'full_system_prompt': prompt_text,
                        'full_user_message': transcript
                    },
                    'response': result
                }
                
                return result, None
                
            except anthropic.RateLimitError as e:
                error_details = str(e)
                if "input tokens" in error_details.lower():
                    if attempt < max_retries - 1:
                        st.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries} —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
                        continue
                    else:
                        return None, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –º–µ–Ω—å—à–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                else:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        
            except Exception as e:
                error_str = str(e)
                if "rate_limit" in error_str.lower() or "429" in error_str:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π."
                elif "timeout" in error_str.lower():
                    if attempt < max_retries - 1:
                        st.warning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                else:
                    return None, f"–û—à–∏–±–∫–∞: {error_str[:200]}"
                    
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∞–º–º–∞—Ä–∏: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
def create_comment_on_video():
    """–°–æ–∑–¥–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript = st.session_state.get('transcript_with_timestamps', '')
        if not transcript:
            return None, "–ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
        try:
            with open("prompt_comment_on_video.txt", "r", encoding="utf-8") as file:
                prompt_text = file.read()
        except FileNotFoundError:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª prompt_comment_on_video.txt"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if "ANTHROPIC_API_KEY" not in st.secrets:
            return None, "API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Claude
        api_key = str(st.secrets["ANTHROPIC_API_KEY"])
        client = anthropic.Anthropic(api_key=api_key)
        
        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limit
        max_retries = 5
        base_delay = 10
        
        for attempt in range(max_retries):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt > 0:
                    wait_time = base_delay * (2 ** (attempt - 1))
                    st.info(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_time)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude —Å streaming
                stream = client.messages.create(
                    model=get_claude_model(),
                    max_tokens=get_max_tokens(),
                    temperature=st.session_state.get('temperature', 0.7),
                    system=prompt_text,
                    messages=[
                        {
                            "role": "user",
                            "content": transcript
                        }
                    ],
                    stream=True
                )
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ streaming response
                result = ""
                for event in stream:
                    if event.type == "content_block_delta":
                        result += event.delta.text
                    elif event.type == "message_stop":
                        break
                print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª–∏–Ω–æ–π {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
                st.session_state.api_history_comment_on_video = {
                    'request': {
                        'model': get_claude_model(),
                        'max_tokens': get_max_tokens(),
                        'temperature': st.session_state.get('temperature', 0.7),
                        'system_prompt': prompt_text[:500] + "..." if len(prompt_text) > 500 else prompt_text,
                        'user_message': transcript[:500] + "..." if len(transcript) > 500 else transcript,
                        'full_system_prompt': prompt_text,
                        'full_user_message': transcript
                    },
                    'response': result
                }
                
                return result, None
                
            except anthropic.RateLimitError as e:
                error_details = str(e)
                if "input tokens" in error_details.lower():
                    if attempt < max_retries - 1:
                        st.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries} —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
                        continue
                    else:
                        return None, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –º–µ–Ω—å—à–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                else:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        
            except Exception as e:
                error_str = str(e)
                if "rate_limit" in error_str.lower() or "429" in error_str:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π."
                elif "timeout" in error_str.lower():
                    if attempt < max_retries - 1:
                        st.warning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                else:
                    return None, f"–û—à–∏–±–∫–∞: {error_str[:200]}"
                    
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è: {str(e)}"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∏–∫–æ–Ω–∫–∏
def copy_button_with_char_count(text: str, key: str, in_header: bool = False):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Å –ø–æ–¥—Å—á—ë—Ç–æ–º —Å–∏–º–≤–æ–ª–æ–≤
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        key: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–Ω–æ–ø–∫–∏
        in_header: True –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ, False –µ—Å–ª–∏ –ø–æ–¥ –ø–æ–ª–µ–º
    """
    if not text:
        return
    
    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
    char_count = len(text)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è JavaScript
    js_id = f"copy_{key}_{hash(text) % 1000000}"
    
    # –°–æ–∑–¥–∞—ë–º –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π HTML –¥–æ–∫—É–º–µ–Ω—Ç
    html_code = f"""
    <!DOCTYPE html>
    <html>
    <head>
        <meta charset="UTF-8">
        <style>
            body {{
                margin: 0;
                padding: 0;
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;
            }}
            .container {{
                display: flex;
                align-items: center;
                justify-content: space-between;
                width: 100%;
                padding: 0.25rem 0;
                margin: -0.5rem 0 0.5rem 0;
                height: 1.5rem;
            }}
            .text {{
                color: rgba(49, 51, 63, 0.6);
                font-size: 0.875rem;
                font-weight: 400;
                line-height: 1.5rem;
            }}
            .copy-btn {{
                background: none;
                border: none;
                padding: 2px 0.25rem 0 0.25rem;
                font-size: 1.25rem;
                cursor: pointer;
                outline: none;
                display: flex;
                align-items: center;
                height: 100%;
            }}
            .copy-btn:focus {{
                outline: none;
            }}
        </style>
    </head>
    <body>
        <div class="container">
            <span class="text">–°–∏–º–≤–æ–ª–æ–≤: {str(char_count).replace(',', ' ')}</span>
            <button class="copy-btn" id="copyBtn" title="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞">üìã</button>
        </div>
        <script>
            const copyBtn = document.getElementById('copyBtn');
            const textToCopy = {json.dumps(text)};
            
            copyBtn.addEventListener('click', async function() {{
                try {{
                    await navigator.clipboard.writeText(textToCopy);
                    copyBtn.innerHTML = '‚úîÔ∏è';
                    copyBtn.title = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                    setTimeout(() => {{
                        copyBtn.innerHTML = 'üìã';
                        copyBtn.title = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞';
                    }}, 2000);
                }} catch(err) {{
                    // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                    const textArea = document.createElement('textarea');
                    textArea.value = textToCopy;
                    textArea.style.position = 'fixed';
                    textArea.style.left = '-999999px';
                    document.body.appendChild(textArea);
                    textArea.focus();
                    textArea.select();
                    try {{
                        document.execCommand('copy');
                        copyBtn.innerHTML = '‚úîÔ∏è';
                        copyBtn.title = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!';
                        setTimeout(() => {{
                            copyBtn.innerHTML = 'üìã';
                            copyBtn.title = '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞';
                        }}, 2000);
                    }} catch(e) {{
                        console.error('Failed to copy');
                    }}
                    document.body.removeChild(textArea);
                }}
            }});
        </script>
    </body>
    </html>
    """
    
    components.html(html_code, height=35)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def create_reply_to_comment(user_comment):
    """–°–æ–∑–¥–∞–µ—Ç –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        transcript = st.session_state.get('transcript_with_timestamps', '')
        if not transcript:
            return None, "–ù–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user_comment:
            return None, "–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞"
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–º–ø—Ç
        try:
            with open("prompt_reply_to_users_comment.txt", "r", encoding="utf-8") as file:
                prompt_text = file.read()
        except FileNotFoundError:
            return None, "–ù–µ –Ω–∞–π–¥–µ–Ω —Ñ–∞–π–ª prompt_reply_to_users_comment.txt"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        if "ANTHROPIC_API_KEY" not in st.secrets:
            return None, "API –∫–ª—é—á Anthropic –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–µ–∫—Ä–µ—Ç–∞—Ö"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç Claude
        api_key = str(st.secrets["ANTHROPIC_API_KEY"])
        client = anthropic.Anthropic(api_key=api_key)
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        combined_message = f"Video transcript:\n{transcript}\n\nUser's comment:\n{user_comment}"
        
        # –ü–æ–ø—ã—Ç–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π rate limit
        max_retries = 5
        base_delay = 10
        
        for attempt in range(max_retries):
            try:
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                if attempt > 0:
                    wait_time = base_delay * (2 ** (attempt - 1))
                    st.info(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_retries}. –û–∂–∏–¥–∞–Ω–∏–µ {wait_time} —Å–µ–∫—É–Ω–¥...")
                    time.sleep(wait_time)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Claude —Å streaming
                stream = client.messages.create(
                    model=get_claude_model(),
                    max_tokens=get_max_tokens(),
                    temperature=st.session_state.get('temperature', 0.7),
                    system=prompt_text,
                    messages=[
                        {
                            "role": "user",
                            "content": combined_message
                        }
                    ],
                    stream=True
                )
                
                # –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–∑ streaming response
                result = ""
                for event in stream:
                    if event.type == "content_block_delta":
                        result += event.delta.text
                    elif event.type == "message_stop":
                        break
                print(f"DEBUG: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª–∏–Ω–æ–π {len(result)} —Å–∏–º–≤–æ–ª–æ–≤")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                st.session_state.api_history_reply_to_comment = {
                    'request': {
                        'model': get_claude_model(),
                        'max_tokens': get_max_tokens(),
                        'temperature': st.session_state.get('temperature', 0.7),
                        'system_prompt': prompt_text[:500] + "..." if len(prompt_text) > 500 else prompt_text,
                        'user_message': combined_message[:500] + "..." if len(combined_message) > 500 else combined_message,
                        'full_system_prompt': prompt_text,
                        'full_user_message': combined_message
                    },
                    'response': result
                }
                
                return result, None
                
            except anthropic.RateLimitError as e:
                error_details = str(e)
                if "input tokens" in error_details.lower():
                    if attempt < max_retries - 1:
                        st.warning(f"‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –≤—Ö–æ–¥–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–ø—ã—Ç–∫–∞ {attempt + 2}/{max_retries} —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
                        continue
                    else:
                        return None, "–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –º–µ–Ω—å—à–µ–π —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏–ª–∏ –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
                else:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ API. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                        
            except Exception as e:
                error_str = str(e)
                if "rate_limit" in error_str.lower() or "429" in error_str:
                    if attempt < max_retries - 1:
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ 5-10 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π."
                elif "timeout" in error_str.lower():
                    if attempt < max_retries - 1:
                        st.warning("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞...")
                        continue
                    else:
                        return None, "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                else:
                    return None, f"–û—à–∏–±–∫–∞: {error_str[:200]}"
                    
    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {str(e)}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–∞ –ª–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
if st.session_state.get('need_rerun', False):
    st.session_state.need_rerun = False
    st.rerun()

# –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
with st.sidebar:
    st.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
    
    # –°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
    available_models = ["Claude Opus 4.1", "Claude Opus 4", "Claude Sonnet 4.5", "Claude Sonnet 4", "Claude Sonnet 3.7"]
    
    # –í—ã–±–æ—Ä –æ—Å–Ω–æ–≤–Ω–æ–π –º–æ–¥–µ–ª–∏
    st.markdown("### –ú–æ–¥–µ–ª—å Claude –æ—Å–Ω.")
    st.session_state.selected_model =     st.selectbox(
        "–î–ª—è —Å–∏–Ω–æ–ø—Å–∏—Å–æ–≤, –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π –∏ —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤:",
        available_models,
        index=2,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Claude Sonnet 4.5
        key="main_model_select"
    )
    
    # –ü–æ–ª–∑—É–Ω–æ–∫ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã
    temperature_value = st.slider(
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:",
        min_value=0.0,
        max_value=1.0,
        value=st.session_state.temperature,
        step=0.1,
        help="–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤. 0 - –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, 1 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å"
    )
    st.session_state.temperature = temperature_value
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–æ–¥–µ–ª–∏
    model_info = get_model_info()
    if model_info:
        with st.container():
            st.markdown("**–ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤:**")
            st.caption(f"–í—Ö–æ–¥—è—â–µ–µ –æ–∫–Ω–æ: {model_info['input_window']}")
            st.caption(f"–í—ã—Ö–æ–¥—è—â–µ–µ –æ–∫–Ω–æ: {model_info['output_window']}")
            st.caption(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤ –≤—Ö–æ–¥—è—â–∏—Ö: {model_info['input_cost']}")
            st.caption(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞ 1M —Ç–æ–∫–µ–Ω–æ–≤ –≤—ã—Ö–æ–¥—è—â–∏—Ö: {model_info['output_cost']}")
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–µ–≤—å—é
    st.markdown("### –ú–æ–¥–µ–ª—å Claude –¥–ª—è –ø—Ä–µ–≤—å—é")
    st.session_state.selected_model_preview = st.selectbox(
        "–î–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–µ–≤—å—é:",
        available_models,
        index=2,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é Claude Sonnet 4.5
        key="preview_model_select"
    )
    
    # –í—ã–±–æ—Ä –º–µ—Ç–æ–¥–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    st.markdown("### –ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏")
    st.session_state.transcript_method = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Ç–æ–¥:",
        ["YouTubeTranscriptApi", "yt-dlp"],
        index=0 if st.session_state.get('transcript_method') == "YouTubeTranscriptApi" else 1,
        key="transcript_method_select",
        help="YouTubeTranscriptApi - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –º–µ—Ç–æ–¥, yt-dlp - –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å –±–æ–ª–µ–µ —à–∏—Ä–æ–∫–∏–º–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏"
    )
    
    # –í—ã–±–æ—Ä —è–∑—ã–∫–∞ —Å—É–±—Ç–∏—Ç—Ä–æ–≤
    st.markdown("### –Ø–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤")
    language_options = {
        "en": "üá¨üáß –ê–Ω–≥–ª–∏–π—Å–∫–∏–π",
        "es": "üá™üá∏ –ò—Å–ø–∞–Ω—Å–∫–∏–π", 
        "pt": "üáµüáπ –ü–æ—Ä—Ç—É–≥–∞–ª—å—Å–∫–∏–π",
        "ru": "üá∑üá∫ –†—É—Å—Å–∫–∏–π"
    }
    st.session_state.subtitle_language = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤:",
        options=list(language_options.keys()),
        format_func=lambda x: language_options[x],
        index=list(language_options.keys()).index(st.session_state.get('subtitle_language', 'en')),
        key="subtitle_language_select",
        help="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤–∏–¥–µ–æ"
    )
    
    # –û–ø—Ü–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–∫—Å–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    st.session_state.use_proxy = st.checkbox(
        "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–∫—Å–∏ –¥–ª—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏",
        value=st.session_state.use_proxy,
        key="use_proxy_checkbox"
    )
    
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    with st.expander("üîç Debug Info"):
        st.write("**Session State:**")
        st.write(f"- video_id: {st.session_state.get('video_id', 'None')}")
        st.write(f"- video_title length: {len(st.session_state.get('video_title', ''))}")
        st.write(f"- thumbnail_text length: {len(st.session_state.get('thumbnail_text', ''))}")
        st.write(f"- transcript length: {len(st.session_state.get('transcript', ''))}")
        st.write(f"- synopsis_orig length: {len(st.session_state.get('synopsis_orig', ''))}")
        st.write(f"- synopsis_red length: {len(st.session_state.get('synopsis_red', ''))}")
        st.write(f"- selected_model: {st.session_state.get('selected_model', 'None')}")
        st.write(f"- selected_model_preview: {st.session_state.get('selected_model_preview', 'None')}")
        st.write(f"- transcript_method: {st.session_state.get('transcript_method', 'None')}")
        st.write(f"- use_proxy: {st.session_state.get('use_proxy', False)}")
        st.write(f"- subtitle_language: {st.session_state.get('subtitle_language', 'None')}")
        
        st.write("\n**Proxy Configuration:**")
        st.write(f"- Total proxies loaded: {len(proxy_manager.proxies)}")
        st.write(f"- Current proxy index: {proxy_manager.current_index}")
        st.write(f"- Current proxy: {proxy_manager.get_proxy_info()}")
        st.write(f"- Max retries per proxy: {proxy_manager.max_retries_per_proxy}")
        st.write(f"- Request timeout: {proxy_manager.request_timeout} seconds")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π —É—Å–ø–µ—à–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ
        if 'proxy_success_info' in st.session_state and st.session_state.proxy_success_info:
            st.write("\n**Last Successful Proxy:**")
            success_info = st.session_state.proxy_success_info
            st.write(f"- Proxy: {success_info.get('last_successful_info', 'N/A')}")
            st.write(f"- Timestamp: {success_info.get('timestamp', 'N/A')}")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ø—ã—Ç–∫–∞—Ö –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        if 'transcript_attempts_log' in st.session_state and st.session_state.transcript_attempts_log:
            st.write("\n**Transcript Attempts Log:**")
            for attempt in st.session_state.transcript_attempts_log[-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –ø–æ–ø—ã—Ç–æ–∫
                status = "‚úÖ Success" if attempt.get('success') else f"‚ùå Failed: {attempt.get('error', 'Unknown error')[:50]}"
                st.write(f"- Attempt {attempt.get('attempt', 'N/A')}: {attempt.get('proxy', 'N/A')} - {status}")
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫
            total_attempts = len(st.session_state.transcript_attempts_log)
            successful_attempts = sum(1 for a in st.session_state.transcript_attempts_log if a.get('success'))
            st.write(f"\n**Statistics:** {successful_attempts}/{total_attempts} successful attempts")
        
        st.write("\n**Secrets Status:**")
        try:
            st.write(f"- Secrets available: {hasattr(st, 'secrets')}")
            if hasattr(st, 'secrets'):
                st.write(f"- Total secrets: {len(list(st.secrets.keys()))}")
                st.write(f"- ANTHROPIC_API_KEY: {'‚úÖ Found' if 'ANTHROPIC_API_KEY' in st.secrets else '‚ùå Not found'}")
                st.write(f"- YouTube keys: {sum(1 for k in st.secrets.keys() if k.startswith('YOUTUBE_API_KEY_'))}")
        except Exception as e:
            st.write(f"- Error checking secrets: {e}")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üîÑ –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
                st.session_state.video_id = None
                st.session_state.video_title = ""
                st.session_state.thumbnail_text = ""
                st.session_state.transcript = ""
                st.session_state.transcript_with_timestamps = ""
                st.session_state.synopsis_orig = ""
                st.session_state.synopsis_red = ""
                st.session_state.proxy_success_info = {}
                st.session_state.transcript_attempts_log = []
                st.rerun()
        
        with col2:
            if st.button("üîÄ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å –ø—Ä–æ–∫—Å–∏"):
                proxy_manager.shuffle_proxies()
                st.success("–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∫—Å–∏ –ø–µ—Ä–µ–º–µ—à–∞–Ω!")
                st.rerun()

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
# –§–æ—Ä–º–∞ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
with st.form("video_form"):
    video_input = st.text_input(
        "URL –∏–ª–∏ ID –≤–∏–¥–µ–æ:",
        placeholder="https://www.youtube.com/watch?v=... –∏–ª–∏ ID –≤–∏–¥–µ–æ"
    )
    
    submitted = st.form_submit_button("üîç –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞", type="primary")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
if submitted and video_input:
    video_id = extract_video_id(video_input)
    
    if not video_id:
        st.error("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ –∏–ª–∏ ID")
    else:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID
        st.session_state.video_id = video_id
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        progress_container = st.container()
        
        with progress_container:
            with st.spinner("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤–∏–¥–µ–æ..."):
                title = get_video_title(video_id)
                st.session_state.video_title = title if title else ""
                st.success(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—É—á–µ–Ω: {title[:50]}..." if title and len(title) > 50 else f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫: {title}")
            
            with st.spinner("üñºÔ∏è –ê–Ω–∞–ª–∏–∑ –ø—Ä–µ–≤—å—é –≤–∏–¥–µ–æ..."):
                thumbnail_text = get_thumbnail_text(video_id)
                st.session_state.thumbnail_text = thumbnail_text if thumbnail_text else ""
                st.success("‚úÖ –¢–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é –ø–æ–ª—É—á–µ–Ω")
            
            with st.spinner("üìÑ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏..."):
                transcript, transcript_with_timestamps = get_video_transcript(video_id)
                st.session_state.transcript = transcript if transcript else ""
                st.session_state.transcript_with_timestamps = transcript_with_timestamps if transcript_with_timestamps else ""
                st.success("‚úÖ –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞")
            
            st.balloons()
            st.success(f"üéâ –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –≤–∏–¥–µ–æ ID: {video_id}")
            
            # –í–∞–∂–Ω–æ: –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            st.rerun()

# –°–µ–∫—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
st.markdown("---")
st.markdown("### –î–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞")

# –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–æ–ª–µ–π –¥–∞–Ω–Ω—ã—Ö
data_container = st.container()

with data_container:
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ - –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø–æ–ª–µ
    col_label1, col_field1 = st.columns([1, 4])
    with col_label1:
        st.markdown("**–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ:**")
    with col_field1:
        current_title = st.session_state.get('video_title', '')
        st.text_input(
            "–ó–∞–≥–æ–ª–æ–≤–æ–∫ –≤–∏–¥–µ–æ",  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—É—Å—Ç—É—é –º–µ—Ç–∫—É
            value=current_title,
            disabled=False,  # –î–µ–ª–∞–µ–º –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
            key=f"title_display_{hash(current_title)}",
            label_visibility="collapsed"  # –°–∫—Ä—ã–≤–∞–µ–º –º–µ—Ç–∫—É
        )
    
    # –¢–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é - —É–º–µ–Ω—å—à–µ–Ω–Ω–æ–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ –ø–æ–ª–µ
    col_label2, col_field2 = st.columns([1, 4])
    with col_label2:
        st.markdown("**–¢–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é:**")
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å—á—ë—Ç –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        current_thumbnail = st.session_state.get('thumbnail_text', '')
        if current_thumbnail:
            copy_button_with_char_count(current_thumbnail, "thumbnail_text", in_header=True)
    with col_field2:
        st.text_area(
            "–¢–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é",  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—É—Å—Ç—É—é –º–µ—Ç–∫—É
            value=current_thumbnail,
            height=50,  # –£–º–µ–Ω—å—à–µ–Ω–æ –≤ 4 —Ä–∞–∑–∞ (–±—ã–ª–æ 200)
            disabled=False,  # –î–µ–ª–∞–µ–º –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
            key=f"thumbnail_display_{hash(current_thumbnail)}",
            label_visibility="collapsed"  # –°–∫—Ä—ã–≤–∞–µ–º –º–µ—Ç–∫—É
        )
    
    # –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ - —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–µ –ø–æ–ª–µ
    col_label3, col_field3 = st.columns([1, 4])
    with col_label3:
        st.markdown("**–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –≤–∏–¥–µ–æ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞:**")
        # –ß–µ–∫–±–æ–∫—Å –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫
        show_timestamps = st.checkbox(
            "–°–æ—Ö—Ä–∞–Ω—è—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏",
            value=st.session_state.show_timestamps,
            key="timestamps_checkbox"
        )
        st.session_state.show_timestamps = show_timestamps
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Å—á—ë—Ç –∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        if show_timestamps:
            current_transcript = st.session_state.get('transcript_with_timestamps', '')
        else:
            current_transcript = st.session_state.get('transcript', '')
        if current_transcript:
            copy_button_with_char_count(current_transcript, f"transcript_{show_timestamps}", in_header=True)
    with col_field3:
        st.text_area(
            "–¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è",  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–ø—É—Å—Ç—É—é –º–µ—Ç–∫—É
            value=current_transcript,
            height=300,  # –£–≤–µ–ª–∏—á–µ–Ω–æ –≤ 1.5 —Ä–∞–∑–∞ (–±—ã–ª–æ 200)
            disabled=False,  # –î–µ–ª–∞–µ–º –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–º
            key=f"transcript_display_{hash(current_transcript)}_{show_timestamps}",
            label_visibility="collapsed"  # –°–∫—Ä—ã–≤–∞–µ–º –º–µ—Ç–∫—É
        )

# –°–µ–∫—Ü–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π
st.markdown("---")
st.markdown("### –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏")

# –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
col1_header, col1_btn = st.columns([4, 1])
with col1_header:
    st.markdown("**–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞**")
with col1_btn:
    create_annotation_orig_clicked = st.button("–°–æ–∑–¥–∞—Ç—å", key="create_annotation_orig")

# –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
if st.session_state.get('annotation_orig', ''):
    st.text_area(
        "–ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞",
        value=st.session_state.annotation_orig,
        height=200,
        key="annotation_orig_display",
        label_visibility="collapsed"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥ –ø–æ–ª–µ–º
    copy_button_with_char_count(st.session_state.annotation_orig, "annotation_orig")
    
    # –°–≤—ë—Ä–Ω—É—Ç—ã–π –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–µ –∫ API
    if st.session_state.get('api_history_annotation_orig'):
        with st.expander("üîç –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM", expanded=False):
            api_data = st.session_state.api_history_annotation_orig
            st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:**")
            st.code(f"""
–ú–æ–¥–µ–ª—å: {api_data['request']['model']}
–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {api_data['request']['max_tokens']}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {api_data['request']['temperature']}
""")
            st.markdown("**–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['system_prompt'])
            st.markdown("**–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['user_message'])
            
            # –ü–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
            tab1, tab2, tab3 = st.tabs(["–ü–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", "–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–û—Ç–≤–µ—Ç LLM"])
            with tab1:
                st.text_area("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", value=api_data['request']['full_system_prompt'], height=300, key="full_system_prompt_annot_orig", label_visibility="collapsed")
            with tab2:
                st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value=api_data['request']['full_user_message'], height=300, key="full_user_message_annot_orig", label_visibility="collapsed")
            with tab3:
                st.text_area("–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏", value=api_data['response'], height=300, key="full_response_annot_orig", label_visibility="collapsed")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
if create_annotation_orig_clicked:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    if not st.session_state.get('transcript', ''):
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º video_id
        if not st.session_state.video_id:
            st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞'")
        else:
            # –ï—Å—Ç—å video_id, –Ω–æ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            with st.spinner("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ..."):
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                title = get_video_title(st.session_state.video_id)
                st.session_state.video_title = title if title else ""
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é
                thumbnail_text = get_thumbnail_text(st.session_state.video_id)
                st.session_state.thumbnail_text = thumbnail_text if thumbnail_text else ""
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                transcript, transcript_with_timestamps = get_video_transcript(st.session_state.video_id)
                st.session_state.transcript = transcript if transcript else ""
                st.session_state.transcript_with_timestamps = transcript_with_timestamps if transcript_with_timestamps else ""
                
                if not st.session_state.transcript:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ")
                else:
                    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω—ã")
                    
                    # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
                    with st.spinner("ü§ñ –°–æ–∑–¥–∞—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞..."):
                        annotation, error = create_annotation_orig()
                        if error:
                            st.error(f"‚ùå {error}")
                        else:
                            st.session_state.annotation_orig = annotation
                            st.success(f"‚úÖ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ —Å–æ–∑–¥–∞–Ω–∞ ({len(annotation)} —Å–∏–º–≤–æ–ª–æ–≤)")
                            st.rerun()
    else:
        # –ï—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è - —Å–æ–∑–¥–∞–µ–º –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é
        with st.spinner("ü§ñ –°–æ–∑–¥–∞—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏—é —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞..."):
            annotation, error = create_annotation_orig()
            if error:
                st.error(f"‚ùå {error}")
            else:
                st.session_state.annotation_orig = annotation
                st.success(f"‚úÖ –ê–Ω–Ω–æ—Ç–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ —Å–æ–∑–¥–∞–Ω–∞ ({len(annotation)} —Å–∏–º–≤–æ–ª–æ–≤)")
                st.rerun()


# –°–µ–∫—Ü–∏—è —Å–∏–Ω–æ–ø—Å–∏—Å–æ–≤
st.markdown("---")
st.markdown("### –°–∏–Ω–æ–ø—Å–∏—Å—ã")

# –°–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
col1_header, col1_btn = st.columns([4, 1])
with col1_header:
    st.markdown("**–°–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞**")
with col1_btn:
    create_synopsis_orig_clicked = st.button("–°–æ–∑–¥–∞—Ç—å", key="create_synopsis_orig")

# –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–Ω–æ–ø—Å–∏—Å–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
if st.session_state.get('synopsis_orig', ''):
    st.text_area(
        "–°–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞",
        value=st.session_state.synopsis_orig,
        height=400,
        key="synopsis_orig_display",
        label_visibility="collapsed"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥ –ø–æ–ª–µ–º
    copy_button_with_char_count(st.session_state.synopsis_orig, "synopsis_orig")
    
    # –°–≤—ë—Ä–Ω—É—Ç—ã–π –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–µ –∫ API
    if st.session_state.get('api_history_synopsis_orig'):
        with st.expander("üîç –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM", expanded=False):
            api_data = st.session_state.api_history_synopsis_orig
            st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:**")
            st.code(f"""
–ú–æ–¥–µ–ª—å: {api_data['request']['model']}
–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {api_data['request']['max_tokens']}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {api_data['request']['temperature']}
""")
            st.markdown("**–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['system_prompt'])
            st.markdown("**–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['user_message'])
            
            # –ü–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
            tab1, tab2, tab3 = st.tabs(["–ü–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", "–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–û—Ç–≤–µ—Ç LLM"])
            with tab1:
                st.text_area("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", value=api_data['request']['full_system_prompt'], height=300, key="full_system_prompt_orig", label_visibility="collapsed")
            with tab2:
                st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value=api_data['request']['full_user_message'], height=300, key="full_user_message_orig", label_visibility="collapsed")
            with tab3:
                st.text_area("–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏", value=api_data['response'], height=300, key="full_response_orig", label_visibility="collapsed")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–Ω–æ–ø—Å–∏—Å–∞ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
if create_synopsis_orig_clicked:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        if not st.session_state.get('transcript', ''):
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º video_id
            if not st.session_state.video_id:
                st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞'")
            else:
                # –ï—Å—Ç—å video_id, –Ω–æ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                with st.spinner("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ..."):
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    title = get_video_title(st.session_state.video_id)
                    st.session_state.video_title = title if title else ""
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é
                    thumbnail_text = get_thumbnail_text(st.session_state.video_id)
                    st.session_state.thumbnail_text = thumbnail_text if thumbnail_text else ""
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                    transcript, transcript_with_timestamps = get_video_transcript(st.session_state.video_id)
                    st.session_state.transcript = transcript if transcript else ""
                    st.session_state.transcript_with_timestamps = transcript_with_timestamps if transcript_with_timestamps else ""
                    
                    if not st.session_state.transcript:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ")
                    else:
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω—ã")
                        
                        # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω–æ–ø—Å–∏—Å
                        with st.spinner("ü§ñ –°–æ–∑–¥–∞—é —Å–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞..."):
                            synopsis, error = create_synopsis_orig()
                            if error:
                                st.error(f"‚ùå {error}")
                            else:
                                st.session_state.synopsis_orig = synopsis
                                st.success(f"‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ —Å–æ–∑–¥–∞–Ω ({len(synopsis)} —Å–∏–º–≤–æ–ª–æ–≤)")
                                st.rerun()
        else:
            # –ï—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è - —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω–æ–ø—Å–∏—Å
            with st.spinner("ü§ñ –°–æ–∑–¥–∞—é —Å–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞..."):
                synopsis, error = create_synopsis_orig()
                if error:
                    st.error(f"‚ùå {error}")
                else:
                    st.session_state.synopsis_orig = synopsis
                    st.success(f"‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ —Å–æ–∑–¥–∞–Ω ({len(synopsis)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    st.rerun()

# –°–∏–Ω–æ–ø—Å–∏—Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
col2_header, col2_btn = st.columns([4, 1])
with col2_header:
    st.markdown("**–°–∏–Ω–æ–ø—Å–∏—Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π**")
with col2_btn:
    create_synopsis_red_clicked = st.button("–°–æ–∑–¥–∞—Ç—å", key="create_synopsis_red")

# –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∏–Ω–æ–ø—Å–∏—Å–∞ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
if st.session_state.get('synopsis_red', ''):
    st.text_area(
        "–°–∏–Ω–æ–ø—Å–∏—Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π",
        value=st.session_state.synopsis_red,
        height=400,
        key="synopsis_red_display",
        label_visibility="collapsed"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥ –ø–æ–ª–µ–º
    copy_button_with_char_count(st.session_state.synopsis_red, "synopsis_red")
    
    # –°–≤—ë—Ä–Ω—É—Ç—ã–π –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–µ –∫ API
    if st.session_state.get('api_history_synopsis_red'):
        with st.expander("üîç –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM", expanded=False):
            api_data = st.session_state.api_history_synopsis_red
            st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:**")
            st.code(f"""
–ú–æ–¥–µ–ª—å: {api_data['request']['model']}
–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {api_data['request']['max_tokens']}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {api_data['request']['temperature']}
""")
            st.markdown("**–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['system_prompt'])
            st.markdown("**–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['user_message'])
            
            # –ü–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
            tab1, tab2, tab3 = st.tabs(["–ü–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", "–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–û—Ç–≤–µ—Ç LLM"])
            with tab1:
                st.text_area("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", value=api_data['request']['full_system_prompt'], height=300, key="full_system_prompt_red", label_visibility="collapsed")
            with tab2:
                st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value=api_data['request']['full_user_message'], height=300, key="full_user_message_red", label_visibility="collapsed")
            with tab3:
                st.text_area("–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏", value=api_data['response'], height=300, key="full_response_red", label_visibility="collapsed")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∏–Ω–æ–ø—Å–∏—Å–∞ –∏–∑–º–µ–Ω—ë–Ω–Ω–æ–≥–æ
if create_synopsis_red_clicked:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞
        if not st.session_state.get('synopsis_orig', ''):
            # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
            if not st.session_state.get('transcript', ''):
                # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º video_id
                if not st.session_state.video_id:
                    st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞'")
                else:
                    # –ï—Å—Ç—å video_id, –Ω–æ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                    with st.spinner("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ..."):
                        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                        title = get_video_title(st.session_state.video_id)
                        st.session_state.video_title = title if title else ""
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é
                        thumbnail_text = get_thumbnail_text(st.session_state.video_id)
                        st.session_state.thumbnail_text = thumbnail_text if thumbnail_text else ""
                        
                        # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                        transcript, transcript_with_timestamps = get_video_transcript(st.session_state.video_id)
                        st.session_state.transcript = transcript if transcript else ""
                        st.session_state.transcript_with_timestamps = transcript_with_timestamps if transcript_with_timestamps else ""
                        
                        if not st.session_state.transcript:
                            st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ")
                        else:
                            st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω—ã")
                            
                            # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º —Å–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞
                            with st.spinner("ü§ñ –°–æ–∑–¥–∞—é —Å–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞..."):
                                synopsis_orig, error = create_synopsis_orig()
                                if error:
                                    st.error(f"‚ùå {error}")
                                else:
                                    st.session_state.synopsis_orig = synopsis_orig
                                    st.success("‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ —Å–æ–∑–¥–∞–Ω")
                                    
                                    # –ò —Å–æ–∑–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å
                                    with st.spinner("ü§ñ –°–æ–∑–¥–∞—é –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å..."):
                                        synopsis_red, error = create_synopsis_red(synopsis_orig)
                                        if error:
                                            st.error(f"‚ùå {error}")
                                        else:
                                            st.session_state.synopsis_red = synopsis_red
                                            st.success(f"‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Å–æ–∑–¥–∞–Ω ({len(synopsis_red)} —Å–∏–º–≤–æ–ª–æ–≤)")
                                            st.rerun()
            else:
                # –ï—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è, –Ω–æ –Ω–µ—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞ - —Å–æ–∑–¥–∞–µ–º –µ–≥–æ
                with st.spinner("ü§ñ –°–æ–∑–¥–∞—é —Å–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞..."):
                    synopsis_orig, error = create_synopsis_orig()
                    if error:
                        st.error(f"‚ùå {error}")
                    else:
                        st.session_state.synopsis_orig = synopsis_orig
                        st.success("‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞ —Å–æ–∑–¥–∞–Ω")
                        
                        # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å
                        with st.spinner("ü§ñ –°–æ–∑–¥–∞—é –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å..."):
                            synopsis_red, error = create_synopsis_red(synopsis_orig)
                            if error:
                                st.error(f"‚ùå {error}")
                            else:
                                st.session_state.synopsis_red = synopsis_red
                                st.success(f"‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Å–æ–∑–¥–∞–Ω ({len(synopsis_red)} —Å–∏–º–≤–æ–ª–æ–≤)")
                                st.rerun()
        else:
            # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å, —Å–æ–∑–¥–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π
            with st.spinner("ü§ñ –°–æ–∑–¥–∞—é –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å..."):
                synopsis_red, error = create_synopsis_red(st.session_state.synopsis_orig)
                if error:
                    st.error(f"‚ùå {error}")
                else:
                    st.session_state.synopsis_red = synopsis_red
                    st.success(f"‚úÖ –°–∏–Ω–æ–ø—Å–∏—Å –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π —Å–æ–∑–¥–∞–Ω ({len(synopsis_red)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    st.rerun()

# –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
col3_header, col3_btn = st.columns([4, 1])
with col3_header:
    st.markdown("**–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é**")
with col3_btn:
    create_thumbnail_variants_clicked = st.button("–°–æ–∑–¥–∞—Ç—å", key="create_thumbnail_variants")

# –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
if st.session_state.get('thumbnail_variants', ''):
    st.text_area(
        "–í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é",
        value=st.session_state.thumbnail_variants,
        height=400,
        key="thumbnail_variants_display",
        label_visibility="collapsed"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥ –ø–æ–ª–µ–º
    copy_button_with_char_count(st.session_state.thumbnail_variants, "thumbnail_variants")
    
    # –°–≤—ë—Ä–Ω—É—Ç—ã–π –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–µ –∫ API
    if st.session_state.get('api_history_thumbnail_variants'):
        with st.expander("üîç –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM", expanded=False):
            api_data = st.session_state.api_history_thumbnail_variants
            st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:**")
            st.code(f"""
–ú–æ–¥–µ–ª—å: {api_data['request']['model']}
–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {api_data['request']['max_tokens']}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {api_data['request']['temperature']}
""")
            st.markdown("**–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['system_prompt'])
            st.markdown("**–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['user_message'])
            
            # –ü–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
            tab1, tab2, tab3 = st.tabs(["–ü–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", "–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–û—Ç–≤–µ—Ç LLM"])
            with tab1:
                st.text_area("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", value=api_data['request']['full_system_prompt'], height=300, key="full_system_prompt_variants", label_visibility="collapsed")
            with tab2:
                st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value=api_data['request']['full_user_message'], height=300, key="full_user_message_variants", label_visibility="collapsed")
            with tab3:
                st.text_area("–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏", value=api_data['response'], height=300, key="full_response_variants", label_visibility="collapsed")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é
if create_thumbnail_variants_clicked:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–µ–≤—å—é
    if not st.session_state.get('thumbnail_text', ''):
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–µ–≤—å—é, –ø—Ä–æ–≤–µ—Ä—è–µ–º video_id
        if not st.session_state.video_id:
            st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞'")
        else:
            # –ï—Å—Ç—å video_id, –Ω–æ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–µ–≤—å—é - –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ
            with st.spinner("üñºÔ∏è –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –ø—Ä–µ–≤—å—é..."):
                thumbnail_text = get_thumbnail_text(st.session_state.video_id)
                st.session_state.thumbnail_text = thumbnail_text if thumbnail_text else ""
                
                if not st.session_state.thumbnail_text:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é")
                else:
                    st.success("‚úÖ –¢–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é –ø–æ–ª—É—á–µ–Ω")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞
                    if not st.session_state.get('synopsis_red', ''):
                        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å")
                    else:
                        # –°–æ–∑–¥–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é
                        with st.spinner("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é..."):
                            variants, error = create_thumbnail_variants(st.session_state.thumbnail_text, st.session_state.synopsis_red)
                            if error:
                                st.error(f"‚ùå {error}")
                            else:
                                st.session_state.thumbnail_variants = variants
                                st.success(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω—ã")
                                st.rerun()
    elif not st.session_state.get('synopsis_red', ''):
        # –ï—Å—Ç—å —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é, –Ω–æ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ —Å–∏–Ω–æ–ø—Å–∏—Å–∞
        st.warning("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —Å–æ–∑–¥–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Å–∏–Ω–æ–ø—Å–∏—Å")
    else:
        # –ï—Å—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
        with st.spinner("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é..."):
            variants, error = create_thumbnail_variants(st.session_state.thumbnail_text, st.session_state.synopsis_red)
            if error:
                st.error(f"‚ùå {error}")
            else:
                st.session_state.thumbnail_variants = variants
                st.success(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç—ã —Ç–µ–∫—Å—Ç–∞ –ø—Ä–µ–≤—å—é —Å–æ–∑–¥–∞–Ω—ã")
                st.rerun()

# –°–µ–∫—Ü–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
st.markdown("---")
st.markdown("### –°—Ü–µ–Ω–∞—Ä–∏–π")

# –°—Ü–µ–Ω–∞—Ä–∏–π - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
col_header, col_btn = st.columns([4, 1])
with col_header:
    st.markdown("**–°—Ü–µ–Ω–∞—Ä–∏–π –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –∏–∑–º–µ–Ω—ë–Ω–Ω—ã–π**")
with col_btn:
    create_scenario_clicked = st.button("–°–æ–∑–¥–∞—Ç—å", key="create_scenario")

# –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
if st.session_state.get('scenario', ''):
    st.text_area(
        "–°—Ü–µ–Ω–∞—Ä–∏–π",
        value=st.session_state.scenario,
        height=500,
        key="scenario_display",
        label_visibility="collapsed"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥ –ø–æ–ª–µ–º
    copy_button_with_char_count(st.session_state.scenario, "scenario")
    
    # –°–≤—ë—Ä–Ω—É—Ç—ã–π –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–µ –∫ API
    if st.session_state.get('api_history_scenario'):
        with st.expander("üîç –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM", expanded=False):
            api_data = st.session_state.api_history_scenario
            st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:**")
            st.code(f"""
–ú–æ–¥–µ–ª—å: {api_data['request']['model']}
–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {api_data['request']['max_tokens']}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {api_data['request']['temperature']}
""")
            st.markdown("**–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['system_prompt'])
            st.markdown("**–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['user_message'])
            
            # –ü–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
            tab1, tab2, tab3 = st.tabs(["–ü–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", "–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–û—Ç–≤–µ—Ç LLM"])
            with tab1:
                st.text_area("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", value=api_data['request']['full_system_prompt'], height=300, key="full_system_prompt_scenario", label_visibility="collapsed")
            with tab2:
                st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value=api_data['request']['full_user_message'], height=300, key="full_user_message_scenario", label_visibility="collapsed")
            with tab3:
                st.text_area("–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏", value=api_data['response'], height=300, key="full_response_scenario", label_visibility="collapsed")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ü–µ–Ω–∞—Ä–∏—è
if create_scenario_clicked:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    if not st.session_state.get('transcript', ''):
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º video_id
        if not st.session_state.video_id:
            st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞'")
        else:
            # –ï—Å—Ç—å video_id, –Ω–æ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            with st.spinner("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ..."):
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                title = get_video_title(st.session_state.video_id)
                st.session_state.video_title = title if title else ""
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é
                thumbnail_text = get_thumbnail_text(st.session_state.video_id)
                st.session_state.thumbnail_text = thumbnail_text if thumbnail_text else ""
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                transcript, transcript_with_timestamps = get_video_transcript(st.session_state.video_id)
                st.session_state.transcript = transcript if transcript else ""
                st.session_state.transcript_with_timestamps = transcript_with_timestamps if transcript_with_timestamps else ""
                
                if not st.session_state.transcript:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ")
                else:
                    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω—ã")
                    
                    # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
                    with st.spinner("ü§ñ –°–æ–∑–¥–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π..."):
                        scenario, error = create_scenario()
                        if error:
                            st.error(f"‚ùå {error}")
                        else:
                            st.session_state.scenario = scenario
                            st.success(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω ({len(scenario)} —Å–∏–º–≤–æ–ª–æ–≤)")
                            st.rerun()
    else:
        # –ï—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è - —Å–æ–∑–¥–∞–µ–º —Å—Ü–µ–Ω–∞—Ä–∏–π
        with st.spinner("ü§ñ –°–æ–∑–¥–∞—é —Å—Ü–µ–Ω–∞—Ä–∏–π..."):
            scenario, error = create_scenario()
            if error:
                st.error(f"‚ùå {error}")
            else:
                st.session_state.scenario = scenario
                st.success(f"‚úÖ –°—Ü–µ–Ω–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω ({len(scenario)} —Å–∏–º–≤–æ–ª–æ–≤)")
                st.rerun()

# –°–µ–∫—Ü–∏—è —Å–∞–º–º–∞—Ä–∏
st.markdown("---")
st.markdown("### –°–∞–º–º–∞—Ä–∏")

# –°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
col_header, col_btn = st.columns([4, 1])
with col_header:
    st.markdown("**–°–æ–∑–¥–∞—Ç—å —Å–∞–º–º–∞—Ä–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏**")
with col_btn:
    create_summary_clicked = st.button("–°–æ–∑–¥–∞—Ç—å", key="create_summary")

# –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–∞–º–º–∞—Ä–∏ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
if st.session_state.get('summary', ''):
    st.text_area(
        "–°–∞–º–º–∞—Ä–∏",
        value=st.session_state.summary,
        height=300,
        key="summary_display",
        label_visibility="collapsed"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥ –ø–æ–ª–µ–º
    copy_button_with_char_count(st.session_state.summary, "summary")
    
    # –°–≤—ë—Ä–Ω—É—Ç—ã–π –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–µ –∫ API
    if st.session_state.get('api_history_summary'):
        with st.expander("üîç –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM", expanded=False):
            api_data = st.session_state.api_history_summary
            st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:**")
            st.code(f"""
–ú–æ–¥–µ–ª—å: {api_data['request']['model']}
–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {api_data['request']['max_tokens']}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {api_data['request']['temperature']}
""")
            st.markdown("**–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['system_prompt'])
            st.markdown("**–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['user_message'])
            
            # –ü–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
            tab1, tab2, tab3 = st.tabs(["–ü–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", "–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–û—Ç–≤–µ—Ç LLM"])
            with tab1:
                st.text_area("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", value=api_data['request']['full_system_prompt'], height=300, key="full_system_prompt_summary", label_visibility="collapsed")
            with tab2:
                st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value=api_data['request']['full_user_message'], height=300, key="full_user_message_summary", label_visibility="collapsed")
            with tab3:
                st.text_area("–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏", value=api_data['response'], height=300, key="full_response_summary", label_visibility="collapsed")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∞–º–º–∞—Ä–∏
if create_summary_clicked:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    if not st.session_state.get('transcript', ''):
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º video_id
        if not st.session_state.video_id:
            st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞'")
        else:
            # –ï—Å—Ç—å video_id, –Ω–æ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            with st.spinner("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ..."):
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                title = get_video_title(st.session_state.video_id)
                st.session_state.video_title = title if title else ""
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é
                thumbnail_text = get_thumbnail_text(st.session_state.video_id)
                st.session_state.thumbnail_text = thumbnail_text if thumbnail_text else ""
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                transcript, transcript_with_timestamps = get_video_transcript(st.session_state.video_id)
                st.session_state.transcript = transcript if transcript else ""
                st.session_state.transcript_with_timestamps = transcript_with_timestamps if transcript_with_timestamps else ""
                
                if not st.session_state.transcript:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ")
                else:
                    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω—ã")
                    
                    # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º —Å–∞–º–º–∞—Ä–∏
                    with st.spinner("ü§ñ –°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏..."):
                        summary, error = create_summary()
                        if error:
                            st.error(f"‚ùå {error}")
                        else:
                            st.session_state.summary = summary
                            st.success(f"‚úÖ –°–∞–º–º–∞—Ä–∏ —Å–æ–∑–¥–∞–Ω–æ ({len(summary)} —Å–∏–º–≤–æ–ª–æ–≤)")
                            st.rerun()
    else:
        # –ï—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è - —Å–æ–∑–¥–∞–µ–º —Å–∞–º–º–∞—Ä–∏
        with st.spinner("ü§ñ –°–æ–∑–¥–∞—é —Å–∞–º–º–∞—Ä–∏..."):
            summary, error = create_summary()
            if error:
                st.error(f"‚ùå {error}")
            else:
                st.session_state.summary = summary
                st.success(f"‚úÖ –°–∞–º–º–∞—Ä–∏ —Å–æ–∑–¥–∞–Ω–æ ({len(summary)} —Å–∏–º–≤–æ–ª–æ–≤)")
                st.rerun()

# –°–µ–∫—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
st.markdown("---")
st.markdown("### –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏")

# –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –∫–Ω–æ–ø–∫–∞ –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
col_header, col_btn = st.columns([4, 1])
with col_header:
    st.markdown("**–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏**")
with col_btn:
    create_comment_on_video_clicked = st.button("–°–æ–∑–¥–∞—Ç—å", key="create_comment_on_video")

# –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
if st.session_state.get('comment_on_video', ''):
    st.text_area(
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ –≤–∏–¥–µ–æ",
        value=st.session_state.comment_on_video,
        height=200,
        key="comment_on_video_display",
        label_visibility="collapsed"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥ –ø–æ–ª–µ–º
    copy_button_with_char_count(st.session_state.comment_on_video, "comment_on_video")
    
    # –°–≤—ë—Ä–Ω—É—Ç—ã–π –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–µ –∫ API
    if st.session_state.get('api_history_comment_on_video'):
        with st.expander("üîç –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM", expanded=False):
            api_data = st.session_state.api_history_comment_on_video
            st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:**")
            st.code(f"""
–ú–æ–¥–µ–ª—å: {api_data['request']['model']}
–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {api_data['request']['max_tokens']}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {api_data['request']['temperature']}
""")
            st.markdown("**–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['system_prompt'])
            st.markdown("**–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['user_message'])
            
            # –ü–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
            tab1, tab2, tab3 = st.tabs(["–ü–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", "–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–û—Ç–≤–µ—Ç LLM"])
            with tab1:
                st.text_area("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", value=api_data['request']['full_system_prompt'], height=300, key="full_system_prompt_comment", label_visibility="collapsed")
            with tab2:
                st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value=api_data['request']['full_user_message'], height=300, key="full_user_message_comment", label_visibility="collapsed")
            with tab3:
                st.text_area("–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏", value=api_data['response'], height=300, key="full_response_comment", label_visibility="collapsed")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
if create_comment_on_video_clicked:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    if not st.session_state.get('transcript_with_timestamps', ''):
        # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º video_id
        if not st.session_state.video_id:
            st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞'")
        else:
            # –ï—Å—Ç—å video_id, –Ω–æ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
            with st.spinner("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ..."):
                # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                title = get_video_title(st.session_state.video_id)
                st.session_state.video_title = title if title else ""
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é
                thumbnail_text = get_thumbnail_text(st.session_state.video_id)
                st.session_state.thumbnail_text = thumbnail_text if thumbnail_text else ""
                
                # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                transcript, transcript_with_timestamps = get_video_transcript(st.session_state.video_id)
                st.session_state.transcript = transcript if transcript else ""
                st.session_state.transcript_with_timestamps = transcript_with_timestamps if transcript_with_timestamps else ""
                
                if not st.session_state.transcript_with_timestamps:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ")
                else:
                    st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω—ã")
                    
                    # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                    with st.spinner("ü§ñ –°–æ–∑–¥–∞—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."):
                        comment, error = create_comment_on_video()
                        if error:
                            st.error(f"‚ùå {error}")
                        else:
                            st.session_state.comment_on_video = comment
                            st.success(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω ({len(comment)} —Å–∏–º–≤–æ–ª–æ–≤)")
                            st.rerun()
    else:
        # –ï—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è - —Å–æ–∑–¥–∞–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        with st.spinner("ü§ñ –°–æ–∑–¥–∞—é –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."):
            comment, error = create_comment_on_video()
            if error:
                st.error(f"‚ùå {error}")
            else:
                st.session_state.comment_on_video = comment
                st.success(f"‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–æ–∑–¥–∞–Ω ({len(comment)} —Å–∏–º–≤–æ–ª–æ–≤)")
                st.rerun()

# –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
st.markdown("**–û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–≤–æ–¥–∞
with st.form("reply_to_comment_form"):
    # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_comment_input = st.text_area(
        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        height=100,
        placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å"
    )
    
    # –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –≤–Ω—É—Ç—Ä–∏ —Ñ–æ—Ä–º—ã
    create_reply_clicked = st.form_submit_button("–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")

# –ü–æ–ª–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ (–ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ–≥–¥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ)
if st.session_state.get('reply_to_comment', ''):
    # –£–±–∏—Ä–∞–µ–º key, —á—Ç–æ–±—ã –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª—è–ª–æ—Å—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏
    st.text_area(
        "–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        value=st.session_state.reply_to_comment,
        height=200,
        label_visibility="collapsed"
    )
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥ –ø–æ–ª–µ–º
    copy_button_with_char_count(st.session_state.reply_to_comment, "reply_to_comment")
    
    # –°–≤—ë—Ä–Ω—É—Ç—ã–π –±–ª–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–µ –∫ API
    if st.session_state.get('api_history_reply_to_comment'):
        with st.expander("üîç –î–µ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å–∞ –∫ LLM", expanded=False):
            api_data = st.session_state.api_history_reply_to_comment
            st.markdown("**–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:**")
            st.code(f"""
–ú–æ–¥–µ–ª—å: {api_data['request']['model']}
–ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {api_data['request']['max_tokens']}
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {api_data['request']['temperature']}
""")
            st.markdown("**–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['system_prompt'])
            st.markdown("**–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–∞—á–∞–ª–æ):**")
            st.text(api_data['request']['user_message'])
            
            # –ü–æ–ª–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –≤–∫–ª–∞–¥–∫–∞—Ö
            tab1, tab2, tab3 = st.tabs(["–ü–æ–ª–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", "–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–û—Ç–≤–µ—Ç LLM"])
            with tab1:
                st.text_area("–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç", value=api_data['request']['full_system_prompt'], height=300, label_visibility="collapsed")
            with tab2:
                st.text_area("–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", value=api_data['request']['full_user_message'], height=300, label_visibility="collapsed")
            with tab3:
                st.text_area("–û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏", value=api_data['response'], height=300, label_visibility="collapsed")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
if create_reply_clicked:
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é –∏–∑ —Ñ–æ—Ä–º—ã
    current_user_comment = user_comment_input
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not current_user_comment:
        st.warning("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
        if not st.session_state.get('transcript_with_timestamps', ''):
            # –ï—Å–ª–∏ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä—è–µ–º video_id
            if not st.session_state.video_id:
                st.warning("‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏ –Ω–∞–∂–º–∏—Ç–µ '–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–µ–Ω—Å–∞'")
            else:
                # –ï—Å—Ç—å video_id, –Ω–æ –Ω–µ—Ç —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ - –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
                with st.spinner("üìù –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –≤–∏–¥–µ–æ..."):
                    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                    title = get_video_title(st.session_state.video_id)
                    st.session_state.video_title = title if title else ""
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç —Å –ø—Ä–µ–≤—å—é
                    thumbnail_text = get_thumbnail_text(st.session_state.video_id)
                    st.session_state.thumbnail_text = thumbnail_text if thumbnail_text else ""
                    
                    # –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é
                    transcript, transcript_with_timestamps = get_video_transcript(st.session_state.video_id)
                    st.session_state.transcript = transcript if transcript else ""
                    st.session_state.transcript_with_timestamps = transcript_with_timestamps if transcript_with_timestamps else ""
                    
                    if not st.session_state.transcript_with_timestamps:
                        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤–∏–¥–µ–æ")
                    else:
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ –æ –≤–∏–¥–µ–æ –ø–æ–ª—É—á–µ–Ω—ã")
                        
                        # –¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
                        with st.spinner("ü§ñ –°–æ–∑–¥–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."):
                            reply, error = create_reply_to_comment(current_user_comment)
                            if error:
                                st.error(f"‚ùå {error}")
                            else:
                                # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤
                                keys_to_remove = [k for k in st.session_state.keys() if 'reply' in k.lower() and k != 'reply_to_comment' and k != 'api_history_reply_to_comment']
                                for key in keys_to_remove:
                                    del st.session_state[key]
                                
                                st.session_state.reply_to_comment = reply
                                st.success(f"‚úÖ –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω ({len(reply)} —Å–∏–º–≤–æ–ª–æ–≤)")
                                st.rerun()
        else:
            # –ï—Å—Ç—å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è - —Å–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
            with st.spinner("ü§ñ –°–æ–∑–¥–∞—é –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π..."):
                reply, error = create_reply_to_comment(current_user_comment)
                if error:
                    st.error(f"‚ùå {error}")
                else:
                    # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–∏–¥–∂–µ—Ç–æ–≤
                    keys_to_remove = [k for k in st.session_state.keys() if 'reply' in k.lower() and k != 'reply_to_comment' and k != 'api_history_reply_to_comment']
                    for key in keys_to_remove:
                        del st.session_state[key]
                    
                    st.session_state.reply_to_comment = reply
                    st.success(f"‚úÖ –û—Ç–≤–µ—Ç —Å–æ–∑–¥–∞–Ω ({len(reply)} —Å–∏–º–≤–æ–ª–æ–≤)")
                    st.rerun()

# Footer —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
st.markdown("---")
if st.session_state.video_id:
    st.info(f"üìå –¢–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ ID: {st.session_state.video_id}")